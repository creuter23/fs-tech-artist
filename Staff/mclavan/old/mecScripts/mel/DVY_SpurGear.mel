/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: Davveys Gear Generator
''    Author:  
''    Last Updated: Apr 07, 2007
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/poly_tools/4442.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

//////////////////////////////////////////////////////////////////////////////////////
//	Title Section

//								- DVY_SpurGear -

//////////////////////////////////////////////////////////////////////////////////////
//	Description and Usage Section
/*

	Called by DVY_GearBuild to generate and position a Single Spur Type Gear.
	Gear is named and sequentially numbered automatically. 
	Subsequent Gears in same Group are rotated to ensure correct meshing and moved
	upwards to correct position.
			  
	All Gears are produced to Metric Gear Standards using the Metric Module format.


*/
//////////////////////////////////////////////////////////////////////////////////////
//								- Test Data;-


/*	
	SpurTest;
	
global proc SpurTest()
	{
	 float $Data[]; int $Nt[];

		$Data[0] = 3;					//	Module.
		$Data[1] = 20;					//	Pressure Angle.
		$Data[2] = 50;					//	Gear Width.
//		$Data[3] = 15;					//	Helix Angle.
//		$Data[4] = 0;					//	Helix direction  (0 = Rt, 1 =  Lf Hand)
//		$Data[5] = 0;					//	Double Helix style  (0 = Single,
//										//	1= Double, 2 = HerringBone Double style).
		$N = 40;						//	Teeth per Gear.

//		$Nt = {25, 42, 27, 40, 36, 28, 72};
//		$Nt = {40, 42, 24, 40, 36, 28, 72};
//		$Nt = {25, 31, 27, 41, 21, 65, 17};
//		$Nt = {25, 31, 27, 41, 21, 65, 17, 42, 24, 40, 36, 28, 25, 22, 27, 16, 36, 28, 72};
		
		$Nt = {30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30};

	for ($i=0; $i< `size $Nt`; $i++)
		{ $N = $Nt[$i];  DVY_SpurGear ($Data, $N);}
		
	}		
*/	
//////////////////////////////////////////////////////////////////////////////////////

	
global proc string[] DVY_SpurGear (float $Data[], int $N, int $ID, int $Idx, string $Groups[])
 {
	print ("\n   Start of DVY_SpurGear procedure. © Davvey..\n"); 

// ******************************************************************************** //	
//	Global Variables
	 
	 global string $TeethProfiles[], $Type[];
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Local Variables
	 
	string $Temp[], $Temps[], $Shader[], $Tooth[]; 
	string $CurSel[], $GName, $GearGrp[], $Gears[];	// string $PCurveC;	
	int $e, $E, $N, $i, $j, $R;	
	float $Pi, $m, $A, $GW, $PCD, $BD, $RD, $OD;
	float $Ad, $Dd, $WH, $Angle, $Helix ;
	float $Pos[], $Profiles[];
	float $Move, $HubMx, $BoreMx, $Bore, $HubT;
	float $Bool;
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Constants and "Static Data"
	$e = $E = 1;
	$Pi = (22.0/7.0) ;				//	Constant for Pi.
	$N = $N;						//	Teeth per Gear.
	$m = $Data[0];					//	Module
	$A = $Data[1];					//	Pressure Amgle in degrees.
	$GW = $Data[2];					//	Gear Width

	if (`radioButtonGrp -q -sl GearHubRadioButton` == 1)	
		{// Set to One to produce a dummy shaft & Screw for Boolean op to Hubbed Gear Body	
			$Bool = 1;
		}
		 else if (`radioButtonGrp -q -sl GearHubRadioButton` == 2)	
			{// Set to Zero if no Hub required on the Gear Body	
				$Bool = 0;
			}
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Calculated Data
	
	$Ad = $m;										//	Addendum
	$Dd = 1.25 * $m;								//	Dedendum
	$Angle = (360.00/$N);							//	Angle of Rotation for each tooth.
	$WH = $Ad + $Dd;								//	Tooth working height.
	$p = ($m * $Pi);								//	Circular Pitch
	$PCD = ($N * $m);								//	Pitch Circle Diameter 
	$BD = ($PCD * `cosd $A`);						//	Base Diameter.
	$RD = ($PCD - (2.5 * $m * 1.00));				//	Root Diameter.
	$OD = ($PCD + (2 * $m));						//	Outside Diameter (over Teeth).	

//	$Data[14] = ($PCD *0.25) ;	//	$Shaft = Shaft Diameter
//	$Data[15] = 1;				//	$Key = Set to One if Keyway is required
//	$Data[16] = $Data[14] ;				// 	$KeyWidth = Keyway Width.
//	$Data[17] = ;				//	$KeyHeight = Keyway Height (Twice this value is Key height.

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Print Results of Calculated Data
/*		
	print ("\nNumber of Teeth $N is " + $N);
//	print (" , Helix Angle $Helix is " + $Helix);
	print (" and Pressure Angle is " + $A + ". © Davvey..\n");
	print ("\nModule $m is " + $m + ". © Davvey..\n");
	print ("Circular Pitch $p is " + $p + ". © Davvey..\n");
	print ("\nPitch Circle Diameter $PCD is " + $PCD + ". © Davvey..\n");
	print ("Tip Diameter $OD is " + $OD + ". © Davvey..\n");
	print ("Base Diameter $BD is " + $BD + ". © Davvey..\n");
	print ("$Root Diameter $RD is " + $RD + ". © Davvey..\n");
	print ("Angle of Rotation for one Tooth is " + $Angle + ". © Davvey..\n");
	print ("Gear Width is " + $GW + ". © Davvey..\n");
*/	
// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
//	Create Shaders for Gear Parts.
					
		if(!`objExists Teeth_SH `) { $shader[0] = `DVY_Shaders(0)`; }
			 $Shader[0] = "Teeth_SH";
		if(!`objExists Shaft_SH`) { $shader[1] = `DVY_Shaders(9)`; }
			 $Shader[1] = "Shaft_SH";
		if(!`objExists Gear_SH`) { $shader[2] = `DVY_Shaders(1)`; }
			 $Shader[2] = "Gear_SH";	
		if(!`objExists GearHub_SH`) { $shader[2] = `DVY_Shaders(2)`; }
			 $Shader[3] = "GearHub_SH";
			 
//		print "\nShaders used are..\n";
//		print $Shader;

// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
//	Section to set up Gear Groups as Required.
		
	$GName = ("Grp_" + $ID + "_" + $Type[$Idx]);
	print ("$GName is " + $GName + "\n");

	$GearGrp[0] = $Groups[0];
	
	while (`objExists ($GName + "Gear_GrpN_" + $e)`)
		{
			$e++;
		//	print ("$e is " + $e + "\n");
		}
		
		$GearGrp[1] = `group -em -name ($GName + "Gear_GrpN_" + $e)`;

		$GearGrp[2] = `group -em -name ($GName + "GearRotate_GrpN_" + $e)`;
		$GearGrp[3] = `group -em -name ($GName + "Shaft_GrpN_" + $e)`;
		
		parent $GearGrp[3] $GearGrp[2];
		parent $GearGrp[2] $GearGrp[1];
		parent $GearGrp[1] $GearGrp[0];

// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
//	Section to set Gear Width to allow generation of Tooth Spur curve.

	$R = 0;
	$Pos[0] = ($GW * 1.9);
		
//	print ("\n $Pos[0] is " + $Pos[0] + ". © Davvey..\n"); 
		
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Section to Generate "Base" Curve profile for Gear Teeth
//	Profile and move into postion.

	$Profiles[0] = 0;		// 	Gear Type required.
	$Profiles[1] = 2;		// 	Quantity of "Standard" Profiles.
	$Profiles[2] = 2;		//	Quantity of EndCapProfiles required.
	$Profiles[3] = 0;		// 	Quantity of "AngledEnd" Profiles.
	$Profiles[4] = 0;		// 	Quantity of "Center" Profiles.

	$Helix = 0;

	DVY_ToothProfile ($Profiles, $Helix, $m);
	
//	print $TeethProfiles;
	select -r $TeethProfiles[0];
	$Temp = `duplicate -rr -renameChildren`;
		$Temps[2] = $Temp[0];
		$Temps[0] = $TeethProfiles[2];
		$Temps[1] = $TeethProfiles[0];
		$Temps[3] = $TeethProfiles[1];
		$Temps[4] = $TeethProfiles[5];
			scale 1 ($m * 1.0) ($m * 1.0) $Temps;
			move -r 0 ($PCD * 0.5) 0 $Temps;
				setAttr ($Temps[0] + ".sx") ($m * 0.5);
				setAttr ($Temps[4] + ".sx") ($m * -0.5);

// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
// Section to position Profiles for tooth shape depending upon Gear Tooth Type.

			move -r ($GW * 0.475) 0 0 $Temps[0];
			move -r ($GW * 0.45) 0 0 $Temps[1];
			move -r ($GW * -0.45) 0 0 $Temps[3];
			move -r ($GW * -0.475) 0 0 $Temps[4];
					
// -------------------------------------------------------------------------------- //
		
// ******************************************************************************** //	
// Section to position Loft Tooth surfaces and convert to Polygons.
		
		$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 2 -rn 0 -po 0 -rsn true
				$TeethProfiles[3] $TeethProfiles[4]`;
				$Temps[5] = $Temp[0];
		
		$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 2 -rn 0 -po 0 -rsn true
				$TeethProfiles[6] $TeethProfiles[7]`;
				$Temps[6] = $Temp[0];
	
	select -r $TeethProfiles[3] $TeethProfiles[4] $TeethProfiles[6] $TeethProfiles[7];
	delete;
			
		$Temp = `loft -ch 0 -u 0 -c 0 -ar 1 -d 1 -ss 1 -rn 0 -po 0 -rsn true
				$Temps[0] $Temps[1] $Temps[2] $Temps[3] $Temps[4]`;
				$Temps[7] = $Temp[0];
	
		$Temp = `nurbsToPoly -mnd $R -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01 -mel 0.001 -d 0.1 -ut 1
				-un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 1 -es 0 -ntr 0 -mrt 0 -uss 1 $Temps[5]`;
				$CurSel[0] = $Temp[0];
	
		$Temp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01 -mel 0.001 -d 0.1 -ut 1
				-un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 1 -es 0 -ntr 0 -mrt 0 -uss 1 $Temps[6]`;
				$CurSel[1] = $Temp[0];
			
		$Temp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01 -mel 0.001 -d 0.1 -ut 1
					-un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 1 -es 0 -ntr 0 -mrt 0 -uss 1 $Temps[7]`;
			$CurSel[2] = $Temp[0];
				
		$CurSel = `polyUnite -ch 0 $CurSel`;
		polyMergeVertex -d ($m * 0.025) -ch 0 $CurSel[0];
		
	$Tooth[0] = `rename $CurSel[0] ("SpurTooth_" + $e)`;
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Section to Create Gear Ring to hold full set of Helical Gear Teeth

		$Temps = `polyPipe -r ($RD * 0.5) -h ($GW * 1.95) -t ($RD * 0.025) -sa $N -sh 1 -sc 1 -ch 1`;
			rotate 0 0 90 ;
		$Gears[1] = $Temps[0];
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
	
//	Section to duplicate Spur Gear Tooth, Rotate and combine to form 
//	Gear Ring

	$Temps[0]= `group -em -name ($GName + "GearRingN_" + $e)`;
		parent $Tooth[0] $Temps[0];
		$CurSel[0] = $Tooth[0];
	
		for ($i=1; $i<$N; $i++)
			{
				select $Tooth[0];
				$Temp = `duplicate -rr -renameChildren`;
				rotate -r ($Angle * $i) 0 0 $Temp[0];
				$CurSel[$i] = $Temp[0];
			}
			
			$Temp = `polyUnite -ch 0 -name ("RingGear_" + $e) $CurSel`;
				$Gears[2] = $Temp[0];
				$Temp = `polyUnite -ch 0 -name ($GName + "GearTeeth_" + $e) $Gears[1] $Gears[2]`;
				$Gears[1] = $Temp[0];
				
		select -r $Gears[1];
			hyperShade -assign "initialShadingGroup";
			hyperShade -assign $Shader[0];
	
// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
//	Section to calculate shaft and Keyway sizes for Gear Body.

			
		$HubMx = ($PCD * 0.6);
		$BoreMx = ($HubMx * 0.35);
		$Shaft = $Data[14] = $PCD * 0.3;		//	Shaft Diameter
		$Key = $Data[15];						//	Set to One if Keyway is required
//		$KeyWidth = $Data[16];					//	Keyway Width.
//		$KeyHeight = $Data[17];					//	Keyway Height (Twice this value is Key height.
		$Bore = (($RD/2) * 0.99 ) - $Shaft ;
		$HubT = (($HubMx - $BoreMx) * 0.5);

		if ($Bool == 1) {$HubT = ($Shaft * 0.40);}
		if ($Bool == 0) {$HubT = 0;}
			
		$Temp = DVY_ShaftDesign ($BoreMx, (($GW * 1.025) + $HubT), $N, ($HubMx * 0.1), $Gears[6], $Bool, $e);
		
			$ShaftGrp = $Temp;
			
			move -r ($HubT * 0.5) 0 0 $ShaftGrp[0];
			
			xform -ws -piv 0 0 0  $ShaftGrp[0];
			makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 ;
		
// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
//	Section to Generate Gear Body.
	
	int $Face = ($N + 1);
	
	$Temp = `polyCylinder -r ($RD * 0.475) -h ($GW * 1.05) -sx ($N * 1) -sy 1 -sz 0 -ax 0 1 0 -ch 0`;
		rotate -r 0 0 90 ;	
		polyBevel -o 0.10 -oaf 1 -af 1 -sg 1 -ws 0 -mv 1 -sa 20 -ch 0 ($Temp[0] + ".f[" + $Face + "]");
		polyBevel -o 0.10 -oaf 1 -af 1 -sg 1 -ws 0 -mv 1 -sa 20 -ch 0 ($Temp[0] + ".f[" + ($Face - 1) + "]");
		polySubdivideFacet -dv 1 -m 1 -ch 0 ($Temp[0] + ".f[" + (($Face * 2 ) - 1) + "]");
		polySubdivideFacet -dv 1 -m 1 -ch 0 ($Temp[0] + ".f[" + ($Face - 1) + "]");
	
	$Gears[0] = `rename $Temp[0] ($GName + "GearBody_" + $e)`;
	
	if ($Bool == 1)
		{
			$Temp = `polyCylinder -r ($HubMx * 0.4) -h ($HubT) -sx ($N * 1)-sy 1 -sz 0 -ax 0 1 0 -ch 0`;
				polyBevel -o 0.10 -oaf 1 -af 1 -sg 1 -ws 0 -mv 1 -sa 20 -ch 0 ($Temp[0] + ".f[" + $Face + "]");
				polySubdivideFacet -dv 1 -m 1 -ch 0 ($Temp[0] + ".f[" + ($Face) + "]");
				move -r ((($GW * 1.05) + $HubT) * 0.5) 0 0 $Temp[0];
				rotate -r 180 0 90 $Temp[0];
			
			$Temp = `polyBoolOp -op -1 -ch 0 $Gears[0] $Temp[0]`;
		
			$Gears[0] = `rename $Temp[0] ("SpurGear_" + $e)`;
		}
				select -r $ShaftGrp[3] $ShaftGrp[4]; parent -w;
				move -r (($GW * 0.525) + ($HubT * 0.0)) 0 0 $ShaftGrp[2] $ShaftGrp[4]; 
		
	if ($Bool == 1)
		{
			$Temp = `polyBoolOp -op 2 -ch 0 $Gears[0] $ShaftGrp[4]`;	//("BoolScrew_" + $e)`;
				$Gears[0] = `rename $Temp[0] ($GName + "Gear_" + $e)`;
		}
			$Temp = `polyBoolOp -op 2 -ch 0 $Gears[0] $ShaftGrp[3]`;	//("BoolShaft_" + $e)`;
			$Gears[0] = `rename $Temp[0] ($GName + "GearBody_" + $e)`;
			
	select -r $Gears[0];
		hyperShade -assign "initialShadingGroup";
		hyperShade -assign $Shader[2];
		
	parent $Gears[1] $Gears[0];
	parent $Gears[0] $ShaftGrp[0];
	parent $ShaftGrp[0] $GearGrp[3]; 
		
	for ($i=0; $i < `size $ShaftGrp`; $i++)
		{
			if (`objExists $ShaftGrp[$i]`)
				{
					
					$ShaftGrp[$i] = `rename $ShaftGrp[$i] ($GName + $ShaftGrp[$i])`;
				}
			}	
				
			

		print $ShaftGrp;
		select -r -hi  $ShaftGrp[0];
		$Sel = `ls -sl`;
//		print $Sel;
		$i = 0;
		string $Sub = ($E); string $Sub1;

	
// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	

	$j = `size $GearGrp`;	
	
		for ($i=0; $i < `size $Gears`; $i++)
			{ $GearGrp[($i + $j)] = $Gears[$i];}
			
		$j = $i + $j - 1;
		
			for ($i=0; $i<3; $i++)
				{ $GearGrp[($i + $j)] = $ShaftGrp[$i];}
				
// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
// Clean up scene if required.
				
	select "*Surface*"; delete;
	select "*Profile*"; delete;
// -------------------------------------------------------------------------------- //

// ******************************************************************************** //	
// Add custom attribute to record Gear size Group name PCD and Tooth Pitch and Height.
	
	if ($E < 1)
		{
			if (!`exists $GearGrp[0]`)
			   {
			 	 if (!`attributeExists "NameOfGearGrp" $GearGrp[0]`) 
					{ addAttr -ln NameOfGearGrp -dt "string" $GearGrp[0];}
				       setAttr -l 1 -k 0 -type "string" ($GearGrp[0] + ".NameOfGearGrp") $GearGrp[0];

				 if (!`attributeExists "module" $GearGrp[0]`) 
					{ addAttr -ln module -at short $GearGrp[0];}
				       setAttr -l 1 -k 0 -cb 1 ($GearGrp[0] + ".module") $m;

				 if (!`attributeExists "CircularPitch" $GearGrp[0]`) 
					{ addAttr -ln CircularPitch -sn CrPitch -at double $GearGrp[0];}
				       setAttr -l 1 -k 0 ($GearGrp[0] + ".CircularPitch") $p;

				 if (!`attributeExists " ToothHeight" $GearGrp[0]`)
					{ addAttr -ln ToothHeight -sn Height -at double $GearGrp[0];}
				      setAttr -l 1 -k 0 ($GearGrp[0] + ".ToothHeight") $WH;
			 	}
		}

	for ($i=1; $i<`size $GearGrp`; $i++)
		{	
		 if (!`exists $GearGrp[$i]`)
		   {
		 	if (!`attributeExists "NameOfGearGrp" $GearGrp[$i]`) 
			  { addAttr -ln NameOfGearGrp -dt "string" $GearGrp[$i];}
				setAttr -l 1 -k 0 -type "string" ($GearGrp[$i] + ".NameOfGearGrp") $GearGrp[0];

			if (!`attributeExists "module" $GearGrp[$i]`) 
			 { addAttr -ln module -at short $GearGrp[$i];}
			   setAttr -l 1 -k 0 ($GearGrp[$i] + ".module") $m;
			 
			if (!`attributeExists "CircularPitch" $GearGrp[$i]`) 
			 { addAttr -ln CircularPitch -sn CrPitch -at double $GearGrp[$i];}
			    setAttr -l 1 -k 0 ($GearGrp[$i] + ".CircularPitch") $p;
				 
			if (!`attributeExists " ToothHeight" $GearGrp[$i]`)
			 { addAttr -ln ToothHeight -sn Height -at double $GearGrp[$i];}
			    setAttr -l 1 -k 0 ($GearGrp[$i] + ".ToothHeight") $WH;
				 
			if (!`attributeExists " ToothAngle" $GearGrp[$i]`)
			 { addAttr -ln ToothAngle -sn Angle -at double $GearGrp[$i];}
			    setAttr -l 1 -k 0 -cb 1 ($GearGrp[$i] + ".ToothAngle") $Angle;
		
			if ($i > 0)
				 { 
				  if (!`attributeExists "NameOfGear" $GearGrp[$i]`) 
				   { addAttr -ln NameOfGear -dt "string" $GearGrp[$i];}
				 	  setAttr -l 1 -k 0 -type "string" ($GearGrp[$i] + ".NameOfGear") $GearGrp[$i];
	
				  if (!`attributeExists "GearType" $GearGrp[$i]`) 
				   { addAttr -ln GearType -dt "string" $GearGrp[$i];}
				      setAttr -l 1 -k 0 -type "string" ($GearGrp[$i] + ".GearType") "Spur";
	
				  if (!`attributeExists "PitchCircleDiameter" $GearGrp[$i]`) 
				   { addAttr -ln PitchCircleDiameter -sn PCD -at double $GearGrp[$i];}
				      setAttr -l 1 -k 0 -cb 1 ($GearGrp[$i] + ".PitchCircleDiameter") $PCD;
	
				  if (!`attributeExists "ToothCount" $GearGrp[$i]`) 
				   { addAttr -ln ToothCount -at short $GearGrp[$i];}
				      setAttr -l 1 -k 0 -cb 1 ($GearGrp[$i] + ".ToothCount") $N;
				
				 if (!`attributeExists " GearNo" $GearGrp[$i]`)
				  { addAttr -ln GearNo -at short $GearGrp[$i];}
				    setAttr -l 1 -k 0 -cb 1 ($GearGrp[$i] + ".GearNo") $e;
			      }
		 }
	}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Section to move and set "interlock" position for Gears if more than one in the Group.
		
	clear $Pos;

	$Pos[0] = (`getAttr (($GName + "Gear_GrpN_" + (1)) + ".ToothAngle")` * 0.5);
	$Pos[1] = (`getAttr (($GName + "Gear_GrpN_" + (1)) + ".PitchCircleDiameter")` * 0.5);
	$Pos[2] = (`getAttr (($GName + "Gear_GrpN_" + $e) + ".PitchCircleDiameter")` * 0.5);
	$Pos[3] = (`getAttr (($GName + "Gear_GrpN_" + $e) + ".ToothAngle")` * 0.5);

	float $Move;
	
	// Section to move Gears if all in one Group.
	if ($e > 1)
		{
			for ($i=2; $i<$e; $i++)
				{
					$Pos[4] = (`getAttr (($GName + "Gear_GrpN_" + $i)  + ".PitchCircleDiameter")` * 1);
					$Pos[5] = ($Pos[5] + $Pos[4]);
					$Pos[0] = (`getAttr (($GName + "Gear_GrpN_" + ($i-1))  + ".ToothAngle")` * 0.5);
				}
				
			$Move = ($Pos[1] +  $Pos[2] + $Pos[5]);
				// print ("Center Position is " + $Move + " for " + ("HelixGear_GrpN_" + $e) + ".\n");
				move -r 0 $Move 0 $GearGrp[1];
			
			$Pos[10] = `getAttr ($GName + "Gear_GrpN_" + ($e-1) + ".rx")`;
			$Pos[11] = `getAttr ($GName + "Gear_GrpN_" + ($e-1) + ".ToothCount")`;

			if ((($N % 2) == 0) && ($Pos[11] ==0))
				{
					if (($e % 2) == 0) 	
						{
							print ("Angle to rotate " + $GearGrp[1] + " is " + $Pos[3] + "\n");
							rotate $Pos[3] 0 0 $GearGrp[1];
						}
				}
				
			if ((($N % 2) !=0) && ($Pos[10] !=0))
				{
					print ("Angle to rotate " + $GearGrp[1] + " maybe " + $Pos[3] + "\n");
					rotate $Pos[3] 0 0 $GearGrp[1];
				}
				else if  ((($N % 2) ==0) && ($Pos[10] ==0))
					{
						if ((($N % 2) ==0) && ($Pos[11] !=0))
							{
								print ("Angle to rotate " + $GearGrp[1] + " is know " + $Pos[3] + "\n");
								rotate $Pos[3] 0 0 $GearGrp[1];
							}
					}
		}// End of Gear Moves if all in one group.
		
			
	if ($Bool == 0)
		{
			select -r $ShaftGrp[2] $ShaftGrp[4];
			delete;
		}
		
		
		
//	select -r $GearGrp[1];
//	makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;

// ******************************************************************************** //	
// End of procedure and collect required Return Values or Data.

//	print ("\n" + $GearGrp[0] + " contains following parts :- \n");
//	print $GearGrp; print (" © Davvey..\n");
	print ("\nSpur Gear named " + $GearGrp[1]);
	print (" has been generated and positioned ready for use. © Davvey..\n");
	print ("\n  End of DVY_SpurGear procedure. © Davvey..\n"); 
	
	select -r $GearGrp[0];

	return $GearGrp;

 }
	