/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name:  Davvey\'s Bearing Generator
''    Author: Davvey 
''    Last Updated: Jan 15, 2007
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/poly_tools/1027.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/


//////////////////////////////////////////////////////////////////////////////////////
//	Title Section

//						-  DVY_BushBearingBuild -


//////////////////////////////////////////////////////////////////////////////////////
//	Description and Usage Section
/*

	Called by DVY_Bearings to build various styles of Bush Bearings and 
	then add basic Shaders to each part if required.
		
	The Bush Bearings can be Full, Half or Split and Plain, Single or Double ended 
	Flanged in style. 	
	
	All Bearings are produced to Metric Size / Scale and is correctly set to suit Maya's
	user preferences settings.


*/		
//////////////////////////////////////////////////////////////////////////////////////

global proc DVY_BushBearingBuild()
{

	print "Start of DVY_BushBearingBuild procedure. © Davvey..\n";
	
	if (`floatField -q -v BFloatField_1` == 0)
		{
			error "Please select Bearing Inside Diameter © Davvey..\n";
		}
	
	if (`floatField -q -v BFloatField_3` == 0)
		{
			error "Please select Bearing Outside Diameter © Davvey..\n";
		}
		
		if (`floatField -q -v BFloatField_3` <= `floatField -q -v BFloatField_1`)
		{
			error "Please set Bearing Outside Diameter larger than Inside Diameter © Davvey..\n";
		}
	
	if (`floatField -q -v BFloatField_5` == 0)
		{
			error "Please select Bearing Width Diameter © Davvey..\n";
		}
		
	if (`radioButtonGrp -q -sl BushBearingFlangeRadioButton` > 1) 
		{
			if ((`floatField -q -v BFloatField_7` == 0) || (`floatField -q -v BFloatField_9` == 0))
				{
					error "Please set flange sizes © Davvey..\n";
				}
				
			if (`floatField -q -v BFloatField_9` <= `floatField -q -v BFloatField_3`)
				{
					error "Please set Flange Outside Diameter larger than Bearing Outside Diameter © Davvey..\n";
				}
				
		}
	
// ******************************************************************************** //	
//	Global Variables
	
	global string $Units;

	global float $DVYUnit;

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Local Variables
	
	string $Temp[], $Temps[], $DVYBushCurve, $Groups[], $DVYBush[], $Material;
	string $BrName, $BrGroup[], $Shader[];
	string $BrType[] = {"", "Plain", "Split", "Half"};
	string $BrStyle[] = {"", "", "_Single_Flange", "_Double_Flanged"};
	int $a, $b, $c, $E, $i, $j, $k, $Rot, $S, $T, $t;
	float $Ch, $ID, $OD, $Width, $FlOD, $FlThick;
	float $Pos[];
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
	
	$E = 1;
	
	$ID = `floatField -q -v BFloatField_1`;
	$OD = `floatField -q -v BFloatField_3`;
	$Width = `floatField -q -v BFloatField_5`;
	$FlThick = `floatField -q -v BFloatField_7`;
	$FlOD = `floatField -q -v BFloatField_9`;
	$Ch = $Width *0.01;
	$Material = `optionMenu -q -v DVY_BushMaterial`;
	$Type = `radioButtonGrp -q -sl BushBearingStyleRadioButton`;
	$T = $Type;
	$t = `radioButtonGrp -q -sl BushBearingFlangeRadioButton`;
	$BrName = $BrType[$T] + $BrStyle[$t];
	
	print ("$BrName is " + $BrName + "\n");
	
	if ($Type > 1) { $Rot = 180; $S = 4;}
	if ($Type == 1) { $Rot = 360; $S = 8;}
	
	print ("Bush Bearing ID is " + $ID + ". © Davvey..\n");
	print ("Bush Bearing OD is " + $OD + " . © Davvey..\n");
	print ("Bush Bearing Width is " + $Width + ". © Davvey..\n");
	print ("Bush Bearing Flange Thickness is " + $FlThick + ". © Davvey..\n");
	print ("Bush Bearing Flange OD is " + $FlOD + ". © Davvey..\n");
	print ("Bush Bearing material is " + $Material + ". © Davvey..\n");
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Set Scaling unit for Global units used.
		
	DVY_ScaleSet;
//	print ("Current units are " + $Units + " and Scale Factor $DVYUnit is " + $DVYUnit + "\n");
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Create Shaders for Gear Parts.
	
	string $SHName = `optionMenu -q -v DVY_BushMaterial`;
	$SHName = ($SHName + "_SH");
	int $Sh = `optionMenu -q -sl DVY_BushMaterial`;
		print $SHName;
	if ($Sh > 1)
		{
			$s = $Sh + 19;
			if(!`objExists $SHName`)
				{
					$Shader[0] = `DVY_Shaders($s)`; 
			 	}	
		
				$Shader[0] = $SHName;
		}

	print "$Shaders are \n";
		print $Shader;
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
	
	// Generate and Use new Group Node
		 while(`objExists ($BrName + "_BushMain_GrpN_" + $E)`)
			  {
				 $E++;	print ("$E is " + $E + "\n");
			  }
				$BrGroup[0] = `group -em -name ($BrName + "_BushMain_GrpN_" + $E)`;
				print ("Group is called " + $BrGroup[0] + "\n");
				
				
	if ($t == 1)
		{
			$DVYBushCurve = "curve -d 1 -p 0 0 0 ";
			
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width * 0.50) - $Ch) + " 0 0 ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.50) + " 0 " + $Ch + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5) + " 0 " + (($OD-$ID)*0.5 - $Ch) );
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width * 0.50) -$Ch) + " 0 " + (($OD-$ID)*0.5) );
			
			$DVYBushCurve = $DVYBushCurve + ("-p 0 0 " + (($OD-$ID)*0.5) );
			
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width * -0.5)+$Ch) + " 0 " + (($OD-$ID)*0.5) );
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.5) + " 0 " + (($OD-$ID)*0.5 - $Ch) );
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.50) + " 0 " + $Ch + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width * -0.50) + $Ch) + " 0 0 ");
			
			$DVYBushCurve = $DVYBushCurve + ("-p 0 0 0");
			
			$DVYBush[0] = `eval $DVYBushCurve`;
		}
		
	if ($t == 2)
		{
			$DVYBushCurve = "curve -d 1 -p 0 0 0 ";
			
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * 0.5) + " 0 0 ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * 0.5) + " 0 " + (($FlOD - $OD) * -0.5 + $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * 0.5 + $Ch) + " 0 " + (($FlOD - $OD) * -0.5) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 - $Ch) + " 0 " + (($FlOD - $OD) * -0.5) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 ) + " 0 " + (($FlOD - $OD) * -0.5 + $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 ) + " 0 " + (($OD - $ID) * 0.5 - $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 - $Ch) + " 0 " + (($OD - $ID) * 0.5 ) + " ");
			
			$DVYBushCurve = $DVYBushCurve + ("-p 0 0 " + (($OD-$ID)*0.5) );
			
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width * -0.5)+$Ch) + " 0 " + (($OD-$ID)*0.5) );
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.5) + " 0 " + (($OD-$ID)*0.5 - $Ch) );
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.50) + " 0 " + $Ch + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width * -0.50) + $Ch) + " 0 0 ");
			
			$DVYBushCurve = $DVYBushCurve + ("-p 0 0 0");
			
			$DVYBush[0] = `eval $DVYBushCurve`;
		}
		
		
	
	if ($t == 3)
		{
			$DVYBushCurve = "curve -d 1 -p 0 0 0 ";
			
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * 0.5) + " 0 0 ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * 0.5) + " 0 " + (($FlOD - $OD) * -0.5 + $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * 0.5 + $Ch) + " 0 " + (($FlOD - $OD) * -0.5) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 - $Ch) + " 0 " + (($FlOD - $OD) * -0.5) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 ) + " 0 " + (($FlOD - $OD) * -0.5 + $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 ) + " 0 " + (($OD - $ID) * 0.5 - $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * 0.5 - $Ch) + " 0 " + (($OD - $ID) * 0.5 ) + " ");
			
			$DVYBushCurve = $DVYBushCurve + ("-p 0 0 " + (($OD-$ID)*0.5) );
			
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.5 + $Ch) + " 0 " + (($OD - $ID) * 0.5 ) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.5 ) + " 0 " + (($OD - $ID) * 0.5 - $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.5 ) + " 0 " + (($FlOD - $OD) * -0.5 + $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + ($Width * -0.5 + $Ch) + " 0 " + (($FlOD - $OD) * -0.5) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * -0.5 - $Ch) + " 0 " + (($FlOD - $OD) * -0.5) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * -0.5) + " 0 " + (($FlOD - $OD) * -0.5 + $Ch) + " ");
			$DVYBushCurve = $DVYBushCurve + ("-p " + (($Width - $FlThick) * -0.5) + " 0 0 ");

			$DVYBushCurve = $DVYBushCurve + ("-p 0 0 0");
			
			$DVYBush[0] = `eval $DVYBushCurve`;
		}
		
	
		$Temp = `closeCurve -ch 0 -ps 1 -rpo 1 -bb 0.5 -bki 1 -p 0.1 $DVYBush[0]`;
			move -r 0 0 ($OD * -0.5) $DVYBush[0];	
	
		$Temp = `revolve -ch 0 -po 0 -rn 0 -ssw 0 -esw $Rot -ut 1 -tol 0.01 
				-degree 3 -s 5 -ulp 0 -ax 1 0 0 -p 0 0 0 $DVYBush[0]`;
		
			select -r $DVYBush[0];
			delete;
		
		$Temps = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01 -mel 0.001 -d 0.1
				-ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 -cht 0.01 -es 0 -ntr 0 -mrt 0 -uss 1 $Temp[0]`;
				polySoftEdge -a 90 -ch 0 $Temps[0];
		
			select -r $Temp;
			delete;
					
		
		if ($Type > 1) 
			{ polyCloseBorder -ch 0 $Temps;}
			
			
	if ($Sh > 1)
		{
			select -r $Temps[0];
			hyperShade -assign "initialShadingGroup";
			hyperShade -assign $Shader[0];
		
		}
			
		
		if ($Type == 2) 
			{ 
				$Temp = `duplicate -rr $Temps[0]`;
				rotate 180 0 0 $Temp[0];
			}
		
		if ($Type == 1)
			{$DVYBush[0] = `rename $Temps[0] ($BrName + "_Bush_1")`;}
			
		if ($Type > 1) 
			{$DVYBush[0] = `rename $Temps[0] ($BrName + "_HalfBush_1")`;}
		
		if ($Type == 2) 
			{$DVYBush[1] = `rename $Temp[0] ($BrName + "_HalfBush_2")`;}
		
		parent $DVYBush $BrGroup[0];
		
		
		scale $DVYUnit $DVYUnit $DVYUnit $BrGroup[0];
		select -r $BrGroup[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		delete -ch;

}