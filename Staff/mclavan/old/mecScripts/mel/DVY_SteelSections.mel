/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name: Davveys Steel Section Generator
''    Author:  
''    Last Updated: Apr 03, 2007
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/poly_tools/4592.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

//	DVY_Joists (0, 100);
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Local Procedure to build a radius Section for Heel of Flange 
//
// 	Data required 	$IRad = Inside Radius $ORad = Outside Radius.

//	Return	Built Radius Section of correct Unit Length.
	
proc string DVY_HRadius(float $IRad, float $ORad, int $Sec)
{
	
	string $Temp[], $Temps[], $Temps[];
	
	
	$Temps = `polyPipe -r ($ORad) -h 2.0 -t ($ORad - $IRad) -sa $Sec -sh 1 -sc 1 -ch 0`;
		rotate 90 0 5;
		$Temp[0] = $Temps[0];
	
	$Temps = `polyCube -w ($ORad * 2) -h ($ORad * 2) -d 10 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move 0 ($ORad) 0;
	
	$Temps = `polyBoolOp -op 2 -ch 0 $Temp[0] $Temps[0]`;
		$Temp[0] = $Temps[0];
	
	$Temps = `polyCube -w ($ORad * 2) -h ($ORad * 2) -d 10 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move ($ORad) 0 0;
	
	$Temps = `polyBoolOp -op 2 -ch 0 $Temp[0] $Temps[0]`;
	
	return $Temps[0];

}
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Tapered Flange Joist 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return 	Built Joist.

global proc string DVY_Joists(int $T, float $Length)
{
	
	global float $JoistHt[], $JoistWd[], $JoistWeb[], $JoistFl[], $JoistR1[], $JoistR2[];
	
	string $JoistGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$JoistHt =  {76.2, 76.2, 88.9, 101.6, 101.6, 114.3, 127.0, 127.0, 127.0, 152.4, 203.2, 254.0, 254.0};
	$JoistWd =  {76.2, 80.0, 88.9, 44.5,  101.6, 114.3,  76.2, 114.3, 114.3, 127.0, 152.4, 114.3, 203.2};
	$JoistWeb = {5.10, 8.90, 9.50, 4.30,  9.50,  9.50,   5.60,  7.40, 10.20, 10.40, 8.90,  7.60,  10.2};
	$JoistFl =  {8.40, 8.40, 9.90, 6.10,  10.30, 10.70,  9.60, 11.40, 11.50, 13.20, 16.50, 12.80, 19.90};
	$JoistR1 =  {9.40, 9.40, 11.1, 6.90,  11.10, 14.20,  9.40, 9.90,  9.90,  13.50, 15.50, 12.40, 19.60};
	$JoistR2 =  {4.60, 4.60, 3.20, 3.30,  3.20,  3.20,   4.60, 5.00,  4.80,  6.60,  7.60,  6.10,  9.70};
*/

	$a = 0;
	$Temps = `polyCube -w ($JoistWd[$T] * 0.5) -h $JoistFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		rotate 0 0 -8 ($Temps[0] + ".f[1]");
		polyBevel -offset $JoistR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($JoistWd[$T] * 0.25) ($JoistFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			$Temp[$a++] = $Temps[0];

	$Temps = `polyCube -w ($JoistWd[$T] * 0.5) -h $JoistFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		rotate 0 0 8 ($Temps[0] + ".f[1]");
		polyBevel -offset $JoistR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[6]");
			move ($JoistWd[$T] * -0.25) ($JoistFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
			
	$Temps = `polyCube -w ($JoistWeb[$T]) -h ($JoistHt[$T] * 0.5) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move 0 ($JoistHt[$T] * 0.25) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	
	$Temps[0] = DVY_HRadius($JoistR1[$T], ($JoistR1[$T] + $JoistWeb[$T]), 18);
		$Pos[1] = ($JoistR1[$T] + $JoistWeb[$T]) + ($JoistFl[$T] - $JoistWeb[$T]);
			move ($JoistR1[$T] + $JoistWeb[$T] * 0.5) ($Pos[1] * 1.04) 0 $Temps[0];
		
		$Temp[1] = $Temps[0];
		
	$Temps[0] = DVY_HRadius($JoistR1[$T], ($JoistR1[$T] + $JoistWeb[$T]), 18);
		rotate 0 180 0 ;
		move (($JoistR1[$T] + $JoistWeb[$T] * 0.5) * -1) ($Pos[1] * 1.04) 0 $Temps[0];
		
		$Temp[2] = $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temp[1]`;
		$Temps = `polyUnite -ch 0 $Temps[0] $Temp[2]`;
		
		select $Temps[0];
			$Temp = `duplicate -rr`;
				rotate 0 0 180 $Temp[0];
				move 0 $JoistHt[$T] 0 $Temp[0];
		
	$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;
	
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
	
	string $buffer[];
	string $Name = `optionMenu -q -v DVY_JoistsOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("Joist_" + $buffer[0] + $buffer[1] + $buffer[2] + "x" + $Length + "_No_1")`;

	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Tapered Flange TeeBar 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built TeeBar.

global proc string DVY_TaperTeeBar(int $T, float $Length)
{
	
	global float $TaperTeeBarHt[], $TaperTeeBarWd[], $TaperTeeBarWeb[], $TaperTeeBarFl[], $TaperTeeBarR1[], $TaperTeeBarR2[];
	
	string $TaperTeeBarGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$TaperTeeBarHt =  {76.2, 76.2, 88.9, 101.6, 101.6, 114.3, 127.0, 127.0, 127.0, 152.4, 203.2, 254.0, 254.0};
	$TaperTeeBarWd =  {76.2, 80.0, 88.9, 44.5,  101.6, 114.3,  76.2, 114.3, 114.3, 127.0, 152.4, 114.3, 203.2};
	$TaperTeeBarWeb = {5.10, 8.90, 9.50, 4.30,  9.50,  9.50,   5.60,  7.40, 10.20, 10.40, 8.90,  7.60,  10.2};
	$TaperTeeBarFl =  {8.40, 8.40, 9.90, 6.10,  10.30, 10.70,  9.60, 11.40, 11.50, 13.20, 16.50, 12.80, 19.90};
	$TaperTeeBarR1 =  {9.40, 9.40, 11.1, 6.90,  11.10, 14.20,  9.40, 9.90,  9.90,  13.50, 15.50, 12.40, 19.60};
	$TaperTeeBarR2 =  {4.60, 4.60, 3.20, 3.30,  3.20,  3.20,   4.60, 5.00,  4.80,  6.60,  7.60,  6.10,  9.70};
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($TaperTeeBarWd[$T] * 0.5) -h $TaperTeeBarFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		rotate 0 0 -8 ($Temps[0] + ".f[1]");
		polyBevel -offset $TaperTeeBarR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($TaperTeeBarWd[$T] * 0.25) ($TaperTeeBarFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			$Temp[$a++] = $Temps[0];

	$Temps = `polyCube -w ($TaperTeeBarWd[$T] * 0.5) -h $TaperTeeBarFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		rotate 0 0 8 ($Temps[0] + ".f[1]");
		polyBevel -offset $TaperTeeBarR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[6]");
			move ($TaperTeeBarWd[$T] * -0.25) ($TaperTeeBarFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
			
	$Temps = `polyCube -w ($TaperTeeBarWeb[$T]) -h ($TaperTeeBarHt[$T] * 1.0) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move 0 ($TaperTeeBarHt[$T] * 0.5) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius($TaperTeeBarR1[$T], ($TaperTeeBarR1[$T] + $TaperTeeBarWeb[$T]), 18);
		$Pos[1] = ($TaperTeeBarR1[$T] + $TaperTeeBarWeb[$T]) + ($TaperTeeBarFl[$T] - $TaperTeeBarWeb[$T]);
			move ($TaperTeeBarR1[$T] + $TaperTeeBarWeb[$T] * 0.5) ($Pos[1] * 1.04) 0 $Temps[0];
		
		$Temp[1] = $Temps[0];
		
	$Temps[0] = DVY_HRadius($TaperTeeBarR1[$T], ($TaperTeeBarR1[$T] + $TaperTeeBarWeb[$T]), 18);
		rotate 0 180 0 ;
		move (($TaperTeeBarR1[$T] + $TaperTeeBarWeb[$T] * 0.5) * -1) ($Pos[1] * 1.04) 0 $Temps[0];
		
		$Temp[2] = $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temp[1]`;
		$Temps = `polyUnite -ch 0 $Temps[0] $Temp[2]`;
		
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_TaperTeeBarOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("TeeBar_TaperFlange_" + $buffer[2] + $buffer[1] + $buffer[0] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Tapered Flange Channel 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built Channel.

global proc string DVY_TaperChannel(int $T, float $Length)
{
	
	global float $ChannelHt[], $ChannelWd[], $ChannelWeb[], $ChannelFl[], $ChannelR1[], $ChannelR2[];
	
	string $ChannelGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$ChannelHt =  {76.2, 76.2, 88.9, 101.6, 101.6, 114.3, 127.0, 127.0, 127.0, 152.4, 203.2, 254.0, 254.0};
	$ChannelWd =  {76.2, 80.0, 88.9, 44.5,  101.6, 114.3,  76.2, 114.3, 114.3, 127.0, 152.4, 114.3, 203.2};
	$ChannelWeb = {5.10, 8.90, 9.50, 4.30,  9.50,  9.50,   5.60,  7.40, 10.20, 10.40, 8.90,  7.60,  10.2};
	$ChannelFl =  {8.40, 8.40, 9.90, 6.10,  10.30, 10.70,  9.60, 11.40, 11.50, 13.20, 16.50, 12.80, 19.90};
	$ChannelR1 =  {9.40, 9.40, 11.1, 6.90,  11.10, 14.20,  9.40, 9.90,  9.90,  13.50, 15.50, 12.40, 19.60};
	$ChannelR2 =  {4.60, 4.60, 3.20, 3.30,  3.20,  3.20,   4.60, 5.00,  4.80,  6.60,  7.60,  6.10,  9.70};
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($ChannelWd[$T] * 1.0) -h $ChannelFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		rotate 0 0 -5 ($Temps[0] + ".f[1]");
		polyBevel -offset $ChannelR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($ChannelWd[$T] * 0.5) ($ChannelFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			$Temp[$a++] = $Temps[0];


	$Temps = `polyCube -w ($ChannelWeb[$T]) -h ($ChannelHt[$T] * 0.5) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move ($ChannelWeb[$T] * 0.5) ($ChannelHt[$T] * 0.25) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius($ChannelR1[$T], ($ChannelR1[$T] + $ChannelWeb[$T]), 18);
		$Pos[1] = ($ChannelR1[$T] + $ChannelWeb[$T]) + ($ChannelFl[$T] - $ChannelWeb[$T]);
			move ($ChannelR1[$T] + $ChannelWeb[$T] * 1.0) ($Pos[1] * 1.025) 0 $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;
		
		select $Temps[0];
			$Temp = `duplicate -rr`;
				rotate 180 0 0 $Temp[0];
				move 0 $ChannelHt[$T] 0 $Temp[0];
		
	$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;
		
		
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_TaperChannelOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("Channel_TaperFlange_" + $buffer[0] + $buffer[1] + $buffer[2] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}



// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a TeeBar based on Universal Beam 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built TeeBar.

global proc string DVY_TeeBar(int $T, float $Length)
{
	
	global float $TeeBarHt[], $TeeBarWd[], $TeeBarWeb[], $TeeBarFl[], $TeeBarR1[], $TeeBarR2[];
	
	string $TeeBarGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$TeeBarHt =  {76.2, 76.2, 88.9, 101.6, 101.6, 114.3, 127.0, 127.0, 127.0, 152.4, 203.2, 254.0, 254.0};
	$TeeBarWd =  {76.2, 80.0, 88.9, 44.5,  101.6, 114.3,  76.2, 114.3, 114.3, 127.0, 152.4, 114.3, 203.2};
	$TeeBarWeb = {5.10, 8.90, 9.50, 4.30,  9.50,  9.50,   5.60,  7.40, 10.20, 10.40, 8.90,  7.60,  10.2};
	$TeeBarFl =  {8.40, 8.40, 9.90, 6.10,  10.30, 10.70,  9.60, 11.40, 11.50, 13.20, 16.50, 12.80, 19.90};
	$TeeBarR1 =  {9.40, 9.40, 11.1, 6.90,  11.10, 14.20,  9.40, 9.90,  9.90,  13.50, 15.50, 12.40, 19.60};
	$TeeBarR2 =  {4.60, 4.60, 3.20, 3.30,  3.20,  3.20,   4.60, 5.00,  4.80,  6.60,  7.60,  6.10,  9.70};
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($TeeBarWd[$T] * 0.5) -h $TeeBarFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $TeeBarR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($TeeBarWd[$T] * 0.25) ($TeeBarFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			$Temp[$a++] = $Temps[0];

	$Temps = `polyCube -w ($TeeBarWd[$T] * 0.5) -h $TeeBarFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $TeeBarR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[6]");
			move ($TeeBarWd[$T] * -0.25) ($TeeBarFl[$T] * 0.5) 0;
			select -r ($Temps[0] + ".vtx[2:3]");	move -x 0 ; 
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
			
	$Temps = `polyCube -w ($TeeBarWeb[$T]) -h ($TeeBarHt[$T] * 1.0) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move 0 ($TeeBarHt[$T] * 0.5) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius($TeeBarR1[$T], ($TeeBarR1[$T] + $TeeBarWeb[$T]), 18);
		$Pos[1] = ($TeeBarR1[$T] + $TeeBarWeb[$T]) + ($TeeBarFl[$T] - $TeeBarWeb[$T]);
			move ($TeeBarR1[$T] + $TeeBarWeb[$T] * 0.5) ($Pos[1] * 0.95) 0 $Temps[0];
		
		$Temp[1] = $Temps[0];
		
	$Temps[0] = DVY_HRadius($TeeBarR1[$T], ($TeeBarR1[$T] + $TeeBarWeb[$T]), 18);
		rotate 0 180 0 ;
		move (($TeeBarR1[$T] + $TeeBarWeb[$T] * 0.5) * -1) ($Pos[1] * 0.95) 0 $Temps[0];
		
		$Temp[2] = $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temp[1]`;
		$Temps = `polyUnite -ch 0 $Temps[0] $Temp[2]`;
		
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_TeeBarOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("TeeBar_" + $buffer[2] + $buffer[1] + $buffer[0] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build an Equal Angle 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built Equal Angle.

global proc string DVY_EqualAngle(int $T, float $Length)
{
	
	global float $EqAngleHt[], $EqAngleWd[], $EqAngleWeb[], $EqAngleFl[], $EqAngleR1[], $EqAngleR2[];
	
	string $EqAngleGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$EqAngleHt =  {20.0, 25.0, 25.0, 25.0, 30.0, 30.0, 30.0, 35.0, 40.0, 40.0, 40.0, 40.0, 45.0, 45.0, 45.0, 45.0, 45.0, 50.0, 50.0, 50.0, 50.0, 50.0, 60.0, 60.0, 60.0, 60.0, 65.0, 70.0, 70.0, 70.0, 70.0, 75.0, 75.0, 80.0, 80.0, 80.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 100.0, 100.0, 100.0, 100.0, 120.0, 120.0, 120.0, 120.0, 130.0, 150.0, 150.0, 150.0, 150.0, 160.0, 180.0, 180.0, 200.0, 200.0, 200.0, 200.0, 250.0, 250.0, 250.0, 250.0};
	$EqAngleWd =  {20.0, 25.0, 25.0, 25.0, 30.0, 30.0, 30.0, 35.0, 40.0, 40.0, 40.0, 40.0, 45.0, 45.0, 45.0, 45.0, 45.0, 50.0, 50.0, 50.0, 50.0, 50.0, 60.0, 60.0, 60.0, 60.0, 65.0, 70.0, 70.0, 70.0, 70.0, 75.0, 75.0, 80.0, 80.0, 80.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 100.0, 100.0, 100.0, 100.0, 120.0, 120.0, 120.0, 120.0, 130.0, 150.0, 150.0, 150.0, 150.0, 160.0, 180.0, 180.0, 200.0, 200.0, 200.0, 200.0, 250.0, 250.0, 250.0, 250.0};
	$EqAngleWeb = {3.00, 3.00, 4.00, 5.00, 3.00, 4.00, 5.00, 4.00, 3.00, 4.00, 5.00, 6.00, 3.00, 4.00, 4.50, 5.00, 6.00, 3.00, 4.00, 5.00, 6.00, 8.00, 5.00, 6.00, 8.00, 10.0, 7.00, 6.00, 7.00, 8.00, 10.0, 6.00, 8.00, 6.00, 8.00, 10.0, 6.00, 7.00, 8.00, 9.00, 10.0, 12.0,  8.00, 10.00, 12.00, 15.00, 8.00,  10.00, 12.00, 15.00, 12.00, 10.00, 12.00, 15.00, 18.00, 15.00, 16.00, 18.00, 16.00, 18.00, 20.00, 24.00, 25.00, 28.00, 32.00, 35.00};
	$EqAngleFl =  {3.00, 3.00, 4.00, 5.00, 3.00, 4.00, 5.00, 4.00, 3.00, 4.00, 5.00, 6.00, 3.00, 4.00, 4.50, 5.00, 6.00, 3.00, 4.00, 5.00, 6.00, 8.00, 5.00, 6.00, 8.00, 10.0, 7.00, 6.00, 7.00, 8.00, 10.0, 6.00, 8.00, 6.00, 8.00, 10.0, 6.00, 7.00, 8.00, 9.00, 10.0, 12.0,  8.00, 10.00, 12.00, 15.00, 8.00,  10.00, 12.00, 15.00, 12.00, 10.00, 12.00, 15.00, 18.00, 15.00, 16.00, 18.00, 16.00, 18.00, 20.00, 24.00, 25.00, 28.00, 32.00, 35.00};
	$EqAngleR1 =  {3.50, 3.50, 3.50, 3.50, 5.00, 5.00, 5.00, 5.00, 6.00, 6.00, 6.00, 6.00, 7.00, 7.00, 7.00, 7.00, 7.00, 7.00, 7.00, 7.00, 7.00, 7.00, 8.00, 8.00, 8.00, 8.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 9.00, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.00, 12.00, 12.00, 12.00, 13.00, 13.00, 13.00, 13.00, 14.00, 16.00, 16.00, 16.00, 16.00, 17.00, 18.00, 18.00, 18.00, 18.00, 18.00, 18.00, 20.00, 18.00, 20.00, 18.00};
	$EqAngleR2 =  {1.75, 1.75, 1.75, 1.75, 2.50, 2.50, 2.50, 2.50, 3.00, 3.00, 3.00, 3.00, 3.50, 3.50, 3.50, 3.50, 3.50, 3.50, 3.50, 3.50, 3.50, 3.50, 4.00, 4.00, 4.00, 4.00, 4.50, 4.50, 4.50, 4.50, 4.50, 4.50, 4.50, 5.00, 5.00, 5.00, 5.50, 5.50, 5.50, 5.50, 5.50, 5.50,  6.00,  6.00,  6.00,  6.00,  6.50,  6.50,  6.50,  6.50,  7.00,  8.00,  8.00,  8.00,  8.00,  8.50,  9.00,  9.00,  9.00,  9.00,  9.00,  9.00, 10.00,  9.00, 10.00,  9.00};  
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($EqAngleWd[$T] * 1.0) -h $EqAngleFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $EqAngleR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($EqAngleWd[$T] * 0.5) ($EqAngleFl[$T] * 0.5) 0;
			$Temp[$a++] = $Temps[0];

	$Temps = `polyCube -w ($EqAngleWeb[$T]) -h ($EqAngleHt[$T] * 1.0) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $EqAngleR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($EqAngleWeb[$T] * 0.5) ($EqAngleHt[$T] * 0.5) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius (($EqAngleR1[$T] * 1.02), ($EqAngleR1[$T] + $EqAngleWeb[$T]), 18);
		$Pos[1] = ($EqAngleR1[$T] + $EqAngleWeb[$T]) + ($EqAngleFl[$T] - $EqAngleWeb[$T]);
			move ($EqAngleR1[$T] + $EqAngleWeb[$T] * 1.0) ($Pos[1] * 1.00) 0 $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;

	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_EqualAngleOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("EqAngle_" + $buffer[0] + $buffer[1] + $buffer[2] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build an UnEqual Angle 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built UnEqual Angle.

global proc string DVY_UnEqualAngle(int $T, float $Length)
{
	
	global float $UnEqAngleHt[], $UnEqAngleWd[], $UnEqAngleWeb[], $UnEqAngleFl[], $UnEqAngleR1[], $UnEqAngleR2[];
	
	string $UnEqAngleGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$UnEqAngleHt =  {30.0, 30.0, 30.0, 40.0, 40.0, 45.0, 50.0, 60.0, 60.0, 60.0, 65.0, 70.0, 75.0, 75.0, 80.0, 80.0, 80.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 120.0, 120.0, 120.0, 125.0, 125.0, 125.0, 135.0, 135.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 150.0, 200.0, 200.0, 200.0, 200.0, 200.0};
	$UnEqAngleWd =  {20.0, 20.0, 20.0, 20.0, 25.0, 30.0, 30.0, 30.0, 40.0, 40.0, 50.0, 50.0, 50.0, 50.0, 40.0, 40.0, 60.0, 50.00, 50.00, 65.00, 65.00, 65.00, 75.00, 75.00, 75.00, 80.00, 80.00, 80.00, 75.00, 75.00, 75.00, 65.00, 65.00, 75.00, 75.00, 75.00, 75.00, 90.00, 90.00, 90.00, 100.0, 100.0, 100.0, 100.0, 100.0, 150.0, 150.0};
	$UnEqAngleWeb = {3.00, 3.00, 4.00, 4.00, 4.00, 4.00, 5.00, 5.00, 5.00, 6.00, 5.00, 6.00, 6.00, 8.00, 6.00, 8.00, 7.00,  6.00,  8.00,  7.00,  8.00, 10.00,  8.00, 10.00, 12.00,  8.00, 10.00, 12.00,  8.00, 10.00, 12.00,  8.00, 10.00,  9.00, 10.00, 12.00, 15.00, 10.00, 12.00, 15.00, 10.00, 12.00, 10.00, 12.00, 15.00, 12.00, 15.00};
	$UnEqAngleFl =  {3.00, 3.00, 4.00, 4.00, 4.00, 4.00, 5.00, 5.00, 5.00, 6.00, 5.00, 6.00, 6.00, 8.00, 6.00, 8.00, 7.00,  6.00,  8.00,  7.00,  8.00, 10.00,  8.00, 10.00, 12.00,  8.00, 10.00, 12.00,  8.00, 10.00, 12.00,  8.00, 10.00,  9.00, 10.00, 12.00, 15.00, 10.00, 12.00, 15.00, 10.00, 12.00, 10.00, 12.00, 15.00, 12.00, 15.00};
	$UnEqAngleR1 =  {4.00, 4.00, 4.00, 4.00, 4.00, 4.50, 5.00, 6.00, 6.00, 6.00, 6.00, 7.00, 7.00, 7.00, 7.00, 7.00, 8.00,  8.00,  8.00, 10.00, 10.00, 10.00, 10.00, 10.00, 10.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 11.00, 12.00, 11.00, 11.00, 11.00, 12.00, 12.00, 12.00, 12.00, 12.00, 15.00, 15.00, 15.00, 15.00, 15.00};
	$UnEqAngleR2 =  {2.00, 2.00, 2.00, 2.00, 2.00, 2.25, 2.50, 3.00, 3.00, 3.00, 3.00, 3.50, 3.50, 3.50, 3.50, 3.50, 4.00,  4.00,  4.00,  5.00,  5.00,  5.00,  5.00,  5.00,  5.00,  5.50,  5.50,  5.50,  5.50,  5.50,  5.50,  5.50,  5.50,  6.00,  5.50,  5.50,  5.50,  6.00,  6.00,  6.00,  6.00,  6.00,  7.50,  7.50,  7.50,  7.50,  7.50};
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($UnEqAngleWd[$T] * 1.0) -h $UnEqAngleFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $UnEqAngleR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($UnEqAngleWd[$T] * 0.5) ($UnEqAngleFl[$T] * 0.5) 0;
			$Temp[$a++] = $Temps[0];


	$Temps = `polyCube -w ($UnEqAngleWeb[$T]) -h ($UnEqAngleHt[$T] * 1.0) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $UnEqAngleR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($UnEqAngleWeb[$T] * 0.5) ($UnEqAngleHt[$T] * 0.5) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius(($UnEqAngleR1[$T] * 1.02), ($UnEqAngleR1[$T] + $UnEqAngleWeb[$T]), 18);
		$Pos[1] = ($UnEqAngleR1[$T] + $UnEqAngleWeb[$T]) + ($UnEqAngleFl[$T] - $UnEqAngleWeb[$T]);
			move ($UnEqAngleR1[$T] + $UnEqAngleWeb[$T] * 1.0) ($Pos[1] * 1.0) 0 $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;
		
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_EqualAngleOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("UnEqAngle_" + $buffer[0] + $buffer[1] + $buffer[2] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Universal Beam 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built Universal Beam.

global proc string DVY_UniBeam(int $T, float $Length)
{
	
	global float $UniBeamHt[], $UniBeamWd[], $UniBeamWeb[], $UniBeamFl[], $UniBeamR1[], $UniBeamR2[];
	
	string $UniBeamGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$UniBeamHt =  {127.0, 152.4, 177.8, 203.2, 203.2, 206.8, 254.0, 257.2, 260.4, 251.4, 256.0, 259.6, 305.1, 308.7, 312.7, 304.4, 307.2, 311.0, 303.4, 306.6, 310.4, 349.0, 353.4, 351.4, 355.0, 358.0, 363.4, 398.0, 403.2, 402.6, 406.4, 409.4, 412.8, 449.8, 454.6, 458.0, 462.0, 465.8, 453.4, 457.0, 460.0, 463.4, 467.2, 528.3, 533.1, 536.7, 539.5, 544.5, 602.5, 607.6, 612.2, 617.2, 612.4, 620.2, 635.8, 677.9, 683.5, 687.5, 692.9, 750.0, 754.0, 762.2, 769.8, 834.9, 840.7, 850.9, 903.0, 910.4, 918.4, 926.6, 911.8, 921.0};
	$UniBeamWd =  { 76.0, 88.70, 101.2, 101.8, 133.2, 133.9, 101.6, 101.9, 102.2, 146.1, 146.4, 147.3, 101.6, 101.8, 102.4, 123.4, 124.3, 125.3, 165.0, 165.7, 166.9, 125.4, 126.0, 171.1, 171.5, 172.2, 173.2, 141.8, 142.2, 177.7, 177.9, 178.8, 179.5, 152.4, 152.9, 153.8, 154.4, 155.3, 189.9, 190.4, 191.3, 191.9, 192.8, 208.8, 209.3, 210.0, 210.8, 211.9, 227.6, 228.2, 229.0, 230.2, 304.8, 307.1, 311.4, 253.0, 253.7, 254.5, 255.8, 264.4, 265.2, 266.7, 268.0, 291.7, 292.4, 293.8, 303.3, 304.1, 305.5, 307.7, 418.5, 420.5};
	$UniBeamWeb = { 4.00,  4.50,  4.80,  5.40,  5.70,  6.40,  5.70,  6.00,  6.30,  6.00,  6.30,  7.20,  5.80,  6.00,  6.60,  7.10,  8.00,  9.00,  6.00,  6.70,  7.90,  6.00,  6.60,  7.00,  7.40,  8.10,  9.10,  6.40,  6.80,  7.70,  7.90,  8.80,  9.50,  7.60,  8.10,  9.00,  9.60, 10.50,  8.50,  9.00,  9.90, 10.50, 11.40,  9.60, 10.10, 10.80, 11.60, 12.70, 10.50, 11.10, 11.90, 13.10, 11.80, 14.10, 18.40, 11.70, 12.40, 13.20, 14.50, 12.00, 12.80, 14.30, 15.60, 14.00, 14.70, 16.10, 15.10, 15.90, 17.30, 19.50, 19.40, 21.40};
	$UniBeamFl =  { 7.60,  7.70,  7.90,  9.30,  7.80,  9.60,  6.80,  8.40, 10.00,  8.60, 10.90, 12.70,  7.00,  8.80, 10.80, 10.70, 12.10, 14.00, 10.20, 11.80, 13.70,  8.50, 10.70,  9.70, 11.50, 13.00, 15.70,  8.60, 11.20, 10.90, 12.80, 14.30, 16.00, 10.90, 13.30, 15.00, 17.00, 18.90, 12.70, 14.50, 16.00, 17.70, 19.60, 13.20, 15.60, 17.40, 18.80, 21.30, 14.80, 17.30, 19.60, 22.10, 19.70, 23.60, 31.40, 16.20, 19.00, 21.00, 23.70, 15.50, 17.50, 21.60, 25.40, 18.80, 21.70, 26.80, 20.20, 23.90, 27.90, 32.00, 32.00, 36.60};
	$UniBeamR1 =  { 7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  7.60,  8.90,  8.90,  8.90,  8.90,  8.90,  8.90, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 10.20, 12.70, 12.70, 12.70, 12.70, 12.70, 12.70, 12.70, 12.70, 12.70, 12.70, 16.50, 16.50, 16.50, 15.20, 15.20, 15.20, 15.20, 16.50, 16.50, 16.50, 16.50, 17.80, 17.80, 17.80, 19.10, 19.10, 19.10, 19.10, 24.10, 24.10};
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($UniBeamWd[$T] * 0.5) -h $UniBeamFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $UniBeamR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($UniBeamWd[$T] * 0.25) ($UniBeamFl[$T] * 0.5) 0;
			$Temp[$a++] = $Temps[0];

	$Temps = `polyCube -w ($UniBeamWd[$T] * 0.5) -h $UniBeamFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $UniBeamR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[6]");
			move ($UniBeamWd[$T] * -0.25) ($UniBeamFl[$T] * 0.5) 0;
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
			
	$Temps = `polyCube -w ($UniBeamWeb[$T]) -h ($UniBeamHt[$T] * 1.0) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move 0 ($UniBeamHt[$T] * 0.5) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius($UniBeamR1[$T], ($UniBeamR1[$T] + $UniBeamWeb[$T]), 18);
		$Pos[1] = ($UniBeamR1[$T] + $UniBeamWeb[$T]) + ($UniBeamFl[$T] - $UniBeamWeb[$T]);
			move ($UniBeamR1[$T] + $UniBeamWeb[$T] * 0.5) ($Pos[1] * 0.95) 0 $Temps[0];
		
		$Temp[1] = $Temps[0];
		
	$Temps[0] = DVY_HRadius($UniBeamR1[$T], ($UniBeamR1[$T] + $UniBeamWeb[$T]), 18);
		rotate 0 180 0 ;
		move (($UniBeamR1[$T] + $UniBeamWeb[$T] * 0.5) * -1) ($Pos[1] * 0.95) 0 $Temps[0];
		
		$Temp[2] = $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temp[1]`;
		$Temps = `polyUnite -ch 0 $Temps[0] $Temp[2]`;
		
		select $Temps[0];
			$Temp = `duplicate -rr`;
				rotate 180 0 0 $Temp[0];
				move 0 $UniBeamHt[$T] 0 $Temp[0];
				
	$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;
		
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_UniBeamOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("UniversalBeam_" + $buffer[2] + $buffer[1] + $buffer[0] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Universal Column 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built Universal Column

global proc string DVY_UniColumn(int $T, float $Length)
{
	
	global float $UniColumnHt[], $UniColumnWd[], $UniColumnWeb[], $UniColumnFl[], $UniColumnR1[], $UniColumnR2[];
	
	string $UniColumnGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$UniColumnHt =  {152.4, 157.6, 161.8, 203.2, 206.2, 209.6, 215.8, 222.2, 254.1, 260.3, 266.7, 276.3, 289.1, 307.9, 314.5, 320.5, 327.1, 339.9, 352.5, 365.3, 355.6, 362.0, 368.2, 374.6, 381.0, 393.6, 406.4, 419.0, 436.6, 455.6, 474.6};
	$UniColumnWd =  {152.2, 152.9, 154.4, 203.6, 204.3, 205.8, 506.4, 209.1, 254.6, 256.3, 258.8, 261.3, 265.2, 305.3, 307.4, 309.2, 311.2, 314.5, 318.4, 322.2, 368.6, 370.5, 372.6, 374.7, 394.8, 399.0, 403.0, 407.0, 412.2, 418.5, 424.0};
	$UniColumnWeb = { 5.80,  6.50,  8.00,  7.20,  7.90,  9.40, 10.00, 12.70,  8.60, 10.30, 12.80, 15.30, 19.20,  9.90, 12.00, 13.80, 15.80, 19.10, 23.00, 26.80, 10.40, 12.30, 14.40, 16.50, 18.40, 22.60, 26.60, 30.60, 35.80, 42.10, 47.60};
	$UniColumnFl =  { 6.80,  9.40, 11.50, 11.00, 12.50, 14.20, 17.30, 20.50, 14.20, 17.30, 20.50, 25.30, 31.70, 15.40, 18.70, 21.70, 25.00, 31.40, 37.70, 44.10, 17.50, 20.70, 23.80, 27.00, 30.20, 36.50, 42.90, 49.20, 58.00, 67.50, 77.00};
	$UniColumnR1 =  { 7.60,  7.60,  7.60, 10.20, 10.20, 10.20, 10.20, 10.20, 12.70, 12.70, 12.70, 12.70, 12.70, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20, 15.20};
*/	
	
	$a = 0;
	$Temps = `polyCube -w ($UniColumnWd[$T] * 0.5) -h $UniColumnFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $UniColumnR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[7]");
			move ($UniColumnWd[$T] * 0.25) ($UniColumnFl[$T] * 0.5) 0;
			$Temp[$a++] = $Temps[0];

	$Temps = `polyCube -w ($UniColumnWd[$T] * 0.5) -h $UniColumnFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		polyBevel -offset $UniColumnR2[$T] -offsetAsFraction 0 -autoFit 1 -segments 5
				-worldSpace 1 -fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001
				-smoothingAngle 30 -miteringAngle 180 -angleTolerance 180 -ch 1 ($Temps[0] + ".e[6]");
			move ($UniColumnWd[$T] * -0.25) ($UniColumnFl[$T] * 0.5) 0;
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
			
	$Temps = `polyCube -w ($UniColumnWeb[$T]) -h ($UniColumnHt[$T] * 1.0) -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
		move 0 ($UniColumnHt[$T] * 0.5) 0;
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
	$Temps[0] = DVY_HRadius($UniColumnR1[$T], ($UniColumnR1[$T] + $UniColumnWeb[$T]), 18);
		$Pos[1] = ($UniColumnR1[$T] + $UniColumnWeb[$T]) + ($UniColumnFl[$T] - $UniColumnWeb[$T]);
			move ($UniColumnR1[$T] + $UniColumnWeb[$T] * 0.5) ($Pos[1] * 0.95) 0 $Temps[0];
		
		$Temp[1] = $Temps[0];
		
	$Temps[0] = DVY_HRadius($UniColumnR1[$T], ($UniColumnR1[$T] + $UniColumnWeb[$T]), 18);
		rotate 0 180 0 ;
		move (($UniColumnR1[$T] + $UniColumnWeb[$T] * 0.5) * -1) ($Pos[1] * 0.95) 0 $Temps[0];
		
		$Temp[2] = $Temps[0];
		
		$Temps = `polyUnite -ch 0 $Temp[0] $Temp[1]`;
		$Temps = `polyUnite -ch 0 $Temps[0] $Temp[2]`;
		
		select $Temps[0];
			$Temp = `duplicate -rr`;
				rotate 180 0 0 $Temp[0];
				move 0 $UniColumnHt[$T] 0 $Temp[0];
				
	$Temps = `polyUnite -ch 0 $Temp[0] $Temps[0]`;
		
	scale 1 1 $Length $Temps[0];
		select -r $Temps[0];
		makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
	string $Name = `optionMenu - q -v DVY_UniColumnOption`;
	int $numTokens = `tokenize $Name " " $buffer`;		
		
	print $buffer;
		$Temp[0] = `rename $Temps[0] ("UniversalBeam_" + $buffer[2] + $buffer[1] + $buffer[0] + "x" + $Length + "_No_1")`;
	
	return $Temp[0];

}

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Hollow Square Section 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built Hollow Square Section

global proc string DVY_HollowSquare(int $T, float $Length)
{
	
	global float $HSquareHt[], $HSquareWd[], $HSquareWeb[], $HSquareFl[], $HSquareR1[], $HSquareR2[];
	
	string $HSquareGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$HSquareHt =  {20.0, 20.0};
	$HSquareWd =  {20.0, 20.0};
	$HSquareWeb = {2.00, 2.50};
	$HSquareFl =  {2.00, 2.50};
	$HSquareR1 =  {3.00, 3.75};
	$HSquareR2 =  {2.00, 2.50}; 
*/	
	$Pos[0] = ($HSquareWd[$T] * 0.5) - $HSquareR1[$T];
	
	$Temps = `polyCube -w ($Pos[0]) -h $HSquareFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
			move ($Pos[0] * 0.5) ($HSquareFl[$T] * 0.5) 0;
			$Temp[0] = $Temps[0];

	$Temps[0] = DVY_HRadius(($HSquareR1[$T] - $HSquareWeb[$T]), ($HSquareR1[$T]), 18);
		$Pos[1] = ($HSquareR1[$T]);
		
			rotate 0 180 0 $Temps[0];
			move ($Pos[0]) $Pos[1] 0 $Temps[0];
		
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
				$Temp[0] = $Temps[0];
			
	$Pos[2] = ($HSquareHt[$T] * 0.5) - $HSquareR1[$T];
		$Temps = `polyCube -w $HSquareWeb[$T] -h $Pos[2] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
			move (($HSquareWd[$T] - $HSquareFl[$T]) * 0.5) (($HSquareHt[$T] -$Pos[2]) * 0.5) 0;
			
		$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
		select -r $Temp[0];
			$Temps = `duplicate -rr`;
				$Temp[1] = $Temps[0];
					rotate 0 180 0 $Temp[1];
				
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temp[1]`;
					$Temp[0] = $Temps[0];
			
					select -r $Temp[0];
						$Temps = `duplicate -rr`;
							$Temp[1] = $Temps[0];
								rotate 180 0 0 $Temp[1];
								move 0 $HSquareHt[$T] 0 $Temp[1];
				
						$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temp[1]`;
							scale 1 1 $Length $Temps[0];
								select -r $Temps[0];
								makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
		string $Name = `optionMenu - q -v DVY_HSquareOption`;
		int $numTokens = `tokenize $Name " " $buffer`;		
			
		print $buffer;
			$Temp[0] = `rename $Temps[0] ("HollowSquare_" + $buffer[2] + $buffer[1] + $buffer[0] + "x" + $Length + "_No_1")`;
		
	return $Temp[0];

}

	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Procedure to build a Hollow Rectangle Section 
//
// 	Data required 	$T = Index for Size and $Length = Section Length.

//	Return	Built Hollow Rectangle Section

global proc string DVY_HollowRectangle(int $T, float $Length)
{
	
	global float $HRectangleHt[], $HRectangleWd[], $HRectangleWeb[], $HRectangleFl[], $HRectangleR1[], $HRectangleR2[];
	
	string $HRectangleGrp[], $Temp[], $Temps[], $Temps[];
	float $Pos[];
	int $a, $b, $c, $E, $e, $i, $j, $k;
	
/*	
	$HRectangleHt =  {20.0, 20.0};
	$HRectangleWd =  {20.0, 20.0};
	$HRectangleWeb = {2.00, 2.50};
	$HRectangleFl =  {2.00, 2.50};
	$HRectangleR1 =  {3.00, 3.75};
	$HRectangleR2 =  {2.00, 2.50}; 
*/	
	
	$Pos[0] = ($HRectangleWd[$T] * 0.5) - $HRectangleR1[$T];
	
	$Temps = `polyCube -w ($Pos[0]) -h $HRectangleFl[$T] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
			move ($Pos[0] * 0.5) ($HRectangleFl[$T] * 0.5) 0;
			$Temp[0] = $Temps[0];

	$Temps[0] = DVY_HRadius(($HRectangleR1[$T] - $HRectangleWeb[$T]), ($HRectangleR1[$T]), 18);
		$Pos[1] = ($HRectangleR1[$T]);
		
			rotate 0 180 0 $Temps[0];
			move ($Pos[0]) $Pos[1] 0 $Temps[0];
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
				$Temp[0] = $Temps[0];
			
	$Pos[2] = ($HRectangleHt[$T] * 0.5) - $HRectangleR1[$T];
		$Temps = `polyCube -w $HRectangleWeb[$T] -h $Pos[2] -d 1.0 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -ch 0`;
			move (($HRectangleWd[$T] - $HRectangleFl[$T]) * 0.5) (($HRectangleHt[$T] -$Pos[2]) * 0.5) 0;
			
		$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			$Temp[0] = $Temps[0];
	
		select -r $Temp[0];
			$Temps = `duplicate -rr`;
				$Temp[1] = $Temps[0];
					rotate 0 180 0 $Temp[1];
				
			$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temp[1]`;
					$Temp[0] = $Temps[0];
			
					select -r $Temp[0];
						$Temps = `duplicate -rr`;
							$Temp[1] = $Temps[0];
								rotate 180 0 0 $Temp[1];
								move 0 $HRectangleHt[$T] 0 $Temp[1];
				
						$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temp[1]`;
							scale 1 1 $Length $Temps[0];
								select -r $Temps[0];
								makeIdentity -apply true -t 1 -r 1 -s 1 -n 0;
		
	string $buffer[];
		string $Name = `optionMenu - q -v DVY_HRectangleOption`;
		int $numTokens = `tokenize $Name " " $buffer`;		
			
		print $buffer;
			$Temp[0] = `rename $Temps[0] ("HollowSquare_" + $buffer[2] + $buffer[1] + $buffer[0] + "x" + $Length + "_No_1")`;
		
	return $Temp[0];

}
	

