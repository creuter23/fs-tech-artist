/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name:  Davvey\'s Screw Generator
''    Author:  
''    Last Updated: Jan 30, 2007
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/poly_tools/4427.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

	
//	DVY_Screws;

/*
/////////////////////////////////////////////////////////////////////////////			
				
	Copyright © 2006 DVY_Screws. All rights reserved davvey@ntlworld.com

						- DVY_Screws -
///////////////////////////////////////////////////////////////////////////////


	
	
///////////////////////////////////////////////////////////////////////////////
//					DVY_Screws Procedure
////////////////////////////////////////////////////////////////////////////////
*/

global proc DVY_Screws()
{
	 
	global float $WSThreadDiam[], $WSThreadPitch[], $WSLength[];
	global float $TSThreadDiam[], $ThreadPitchST[], $TSLength[];
	
	global float $NutFlat[], $NutCorners[], $NutHeight[], $LockNutHeight[], $NyLocNutHeight[];
	global float $BoltHead[], $WasherOutDiam[], $WasherThick[], $WasherSpODiam[];
	global float $ThreadLength[], $ThreadLengthL[];
	global string $Tabs[];
	
	float $THData[], $Pos[];
	float $Lead, $Turns, $TurnsEach, $BoltLength;
	float $XMax, $XMin, $YMax, $YMin;
	float $P, $h, $TD, $PCD, $RD; 
	
	int $a, $b, $c, $e, $i, $j, $k, $N;
	
	string $ThreadType[], $Profiles[], $ThreadName[], $Temp[], $Temps[];
	string $Barrel[], $Bolt[], $Nut[], $Hole[];
	string $Thread, $Name;
	
	int $K = 0; int $S = 0; int $D = 0;
	
// ******************************************************************************** //	
//	Constants and "Static Data"
	
	$ThreadType = {"Nut", "LockNut", "NyLocNut", "Hole",
				   "HexHead", "SlotHead", "CrossHead", "SocketHead", "SetScrew", "Stud",
				   "Washer", "SpringWasher"};
	
	string $ScMaterial[] = {"Steel", "Stainless", "Black", "Aluminium", "Brass", "Copper"};
	
	
	$WSThreadDiam =	  {2.00, 2.50, 3.00, 3.25, 3.50, 3.75, 4.00, 4.50, 5.00, 5.50, 6.00, 6.50, 7.00, 7.50, 8.00, 9.50};

	// English TPI.
	$ThreadPitch =     {24, 24, 24, 24, 22, 20, 17, 16, 15, 14, 13, 12, 11, 10, 10, 9,  9,  8};
		
		
	$WSLength =	  {10, 12, 16, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 100, 110, 120, 130, 140, 150, 160, 180, 200, 
				   220, 240, 260, 280, 300, 320, 340, 380, 400 };
	
	
	
	$TSThreadDiam =	  {2.00, 2.50, 3.00, 3.25, 3.50, 3.75, 4.00, 4.50, 5.00, 5.50, 6.00, 6.50, 7.00, 7.50, 8.00, 9.50};
	// English TPI.
	$ThreadPitchST =  {24, 24, 24, 24, 22, 20, 17, 16, 15, 14, 13, 12, 11, 10, 9};
	
	
	
	
//	$ThreadPitch =	  {0.35, 0.40, 0.45, 0.50, 0.70, 0.80, 1.00, 1.00, 1.25, 1.50, 1.75, 2.00, 2.00, 2.50, 2.50, 3.00, 3.50, 4.00};
	
	$ThreadLength =   {6.00, 6.00, 10.0, 12.0, 14.0, 16.0, 18.0, 20.0, 22.0, 26.0, 30.0, 34.0, 38.0, 42.0, 46.0, 48.0, 60.0, 70.0};
	$ThreadLengthL =  {12.0, 12.0, 12.0, 12.0, 14.0, 22.0, 24.0, 26.0, 28.0, 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 66.0, 80.0};	
	$BoltHead = 	  {1.35, 1.45, 1.60, 2.00, 2.80, 3.50, 4.00, 5.00, 5.50, 6.50, 7.50, 9.00, 10.0, 11.0, 12.5, 18.0, 20.0, 25.0};
		
	$NutCorners =	  {3.20, 4.32, 5.45, 6.01, 7.66, 8.79, 11.0, 12.0, 14.3, 18.9, 21.1, 24.1, 26.7, 29.5, 33.5, 39.5, 50.5, 60.0};
	
	$NutHeight =	  {1.60, 1.60, 2.00, 2.40, 3.20, 4.00, 5.00, 5.50, 6.50, 8.00, 10.0, 11.0, 13.0, 15.0, 16.0, 20.0, 24.0, 30.0};
	$LockNutHeight =  {1.20, 1.20, 1.60, 1.80, 2.20, 2.70, 3.20, 3.50, 4.00, 5.00, 6.00, 7.00, 8.00, 9.00, 10.0, 15.0, 18.0, 24.0};
	$NyLocNutHeight = {2.00, 2.00, 3.00, 4.00, 5.00, 5.00, 6.00, 7.00, 8.00, 10.0, 12.0, 14.0, 16.0, 18.5, 20.0, 25.0, 30.0, 36.0};

	$WasherOutDiam =  {4.00, 5.00, 6.50, 7.00, 9.00, 10.5, 12.5, 14.0, 17.0, 21.0, 24.0, 27.0, 30.0, 34.0, 37.0, 46.0, 56.0, 62.0};
	$WasherThick = 	  {0.30, 0.30, 0.50, 0.60, 0.80, 1.00, 1.60, 1.60, 1.60, 2.00, 2.50, 2.50, 3.00, 3.00, 3.00, 4.00, 5.00, 6.00};
	$WasherSpODiam =  {4.00, 4.50, 5.50, 6.00, 8.00, 10.0, 11.0, 13.0, 15.0, 18.0, 20.5, 24.5, 26.0, 31.0, 33.0, 42.0, 50.0, 60.0};
	
	$ThreadName =	  {"1_6", "2", "2_5", "3", "4", "5", "6", "7", "8", "10", "12", "14", "16", "18", "20", "24", "30", "36"};



	//	Check for any "Window History" and delete if it exists.
	 	if (`windowPref -exists DVY_ScrewsWindow`)
			{ windowPref -edit -topLeftCorner 125 700 -widthHeight 470 660 DVY_ScrewsWindow;}
	
	//Check for multiple similar windows.
		if (`window -q -ex DVY_ScrewsWindow`) deleteUI DVY_ScrewsWindow;
	//Build window.
		window -w 470 -h 740 -mnb 1 -mxb 0 -sizeable 1  -title "Davvey's WoodScrew and Self Tapper Generator ver 1.1" DVY_ScrewsWindow;
	
	//Build 'Edit' menu.
	
	string $menuBarLayout = `menuBarLayout`;
		menu -label "File"; 
 			menuItem -label "Close" -command "deleteUI DVY_ScrewsWindow";		
		menu -label "About"; 
	 		menuItem -label "About WoodScrew and Self Tapper Generator" -command "DVY_AboutScrewsWin;";		

	// Create Main Layout column
	string $MainPanel = `columnLayout -width 358 -adj 1 -cal "center" "Main Panel"`;

	// Title and Info Section for the "Main Column Setup" tab. 
		
	string $Title = `columnLayout -width 356 -adj 1 -cal "center" "Title"`;
	
		text -height 5 -label " " ;	//Spacer
		separator -height 5 -style "double" ;
		text -bgc .5 .5 1 -height 20 -align "center" -font "boldLabelFont"
			-label "Davvey's WoodScrew and Self Tapper Generator.";
		separator -height 5 -style "double";
		text -height 5 -label " " ;	//Spacer
	
	setParent $MainPanel;	
		
//////////////////////////////////////////////////////////////////////////////////
//					WoodScrew Tab.
//////////////////////////////////////////////////////////////////////////////////	
// Tab Layout for WoodScrews
	

	string $Tab = `tabLayout -imw 1 -imh 1 "Options"`;
	
	$Tabs[0] = `columnLayout -adj 1 "WoodScrew Options"`;
				
	//Create WoodScrew Options Tab
	
	string $WSOptions = `frameLayout -height 490 -labelVisible 0 -label "WSOptions" -la "center" -bs "in" " WS Set Up "`;
	
	string $WSOptionsCol =  `columnLayout -enable 1 -adj 1 -cat "left" 5 -cal "left" "WSOptionsCol"`;	

		separator -h 2 -bgc 0.7 1 0.7 -style "none";
		text -height 20 -bgc 0.7 1 0.7  -align "left" -label " Select Diameter & Length, UI will show English equiv. Then select each option Required";
		separator -h 2 -bgc 0.7 1 0.7 -style "none";
		
	separator -h 10 -style "double";
	text -height 2 -label "";
	
	string $WSDiamSel = `rowColumnLayout -enable 1 -nc 4
						-cw 1 140 -cal 1 "center" -cat 1 "both" 10
						-cw 2 80 -cal 2 "center" -cat 2 "both" 5
						-cw 3 120 -cal 3 "center" -cat 3 "both" 10
						-cw 4 90 -cal 4 "center" -cat 4 "both" 10
						
					"DiameterCol"`;
	
	text -height 15 -align "center" -label " Diameter Required (mm)";
	text -height 15 -align "center" -label " ";
	text -height 15 -align "center" -label " Screw Length (mm)  ";
	text -height 15 -align "center" -label " Material";
	
	text -height 5 -label "";
	text -height 5 -label "";
	text -height 5 -label "";
	text -height 5 -label "";
	
		optionMenu -width 110 -cc ("DVY_ScrewCallback (1)") DVY_WSDiamOption;
					menuItem -l "Diameter";
		    			menuItem -l ($WSThreadDiam[0] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[1] + " mm");
		    			menuItem -l ($WSThreadDiam[2] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[3] + " mm");
		    			menuItem -l ($WSThreadDiam[4] + " mm");
		    			menuItem -l ($WSThreadDiam[5] + " mm");
		    			menuItem -l ($WSThreadDiam[6] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[7] + " mm");
		    			menuItem -l ($WSThreadDiam[8] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[9] + " mm");
		    			menuItem -l ($WSThreadDiam[10] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[11] + " mm");
		    			menuItem -l ($WSThreadDiam[12] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[13] + " mm");
		    			menuItem -l ($WSThreadDiam[14] + ".0 mm");
		    			menuItem -l ($WSThreadDiam[15] + " mm");
						
	text -height 15 -align "center" -label " ";
					
		optionMenu -width 110 -cc ("DVY_ScrewCallback (2)") DVY_WSLengthOption;
					menuItem -l "Length";
		    			menuItem -l ($WSLength[0] + " mm");
		    			menuItem -l ($WSLength[1] + " mm");
		    			menuItem -l ($WSLength[2] + " mm");
		    			menuItem -l ($WSLength[3] + " mm");
		    			menuItem -l ($WSLength[4] + " mm");
		    			menuItem -l ($WSLength[5] + " mm");
		    			menuItem -l ($WSLength[6] + " mm");
		    			menuItem -l ($WSLength[7] + " mm");
		    			menuItem -l ($WSLength[8] + " mm");
		    			menuItem -l ($WSLength[9] + " mm");
		    			menuItem -l ($WSLength[10] + " mm");
		    			menuItem -l ($WSLength[11] + " mm");
		    			menuItem -l ($WSLength[12] + " mm");
		    			menuItem -l ($WSLength[13] + " mm");
		    			menuItem -l ($WSLength[14] + " mm");
		    			menuItem -l ($WSLength[15] + " mm");
		    			menuItem -l ($WSLength[16] + " mm");
		    			menuItem -l ($WSLength[17] + " mm");
		    			menuItem -l ($WSLength[18] + " mm");
		    			menuItem -l ($WSLength[19] + " mm");
		    			menuItem -l ($WSLength[20] + " mm");
		    			menuItem -l ($WSLength[21] + " mm");
		    			menuItem -l ($WSLength[22] + " mm");
		    			menuItem -l ($WSLength[23] + " mm");
		    			menuItem -l ($WSLength[24] + " mm");
		    			menuItem -l ($WSLength[25] + " mm");
		    			menuItem -l ($WSLength[26] + " mm");
		    			menuItem -l ($WSLength[27] + " mm");
		    			menuItem -l ($WSLength[28] + " mm");
		    			menuItem -l ($WSLength[29] + " mm");
		    			menuItem -l ($WSLength[30] + " mm");
						
				$a = 0;
				optionMenu -width 110  DVY_ScrewOption;
					menuItem -l "Material";
		    			menuItem -l $ScMaterial[$a++];
		    			menuItem -l $ScMaterial[$a++];
		    			menuItem -l $ScMaterial[$a++];
		    			menuItem -l $ScMaterial[$a++];
		    			menuItem -l $ScMaterial[$a++];
		    			menuItem -l $ScMaterial[$a++];
						
	setParent..;
	
	string $WSEnglish = `rowColumnLayout -enable 1 -nc 4
						-cw 1 130 -cal 1 "center" -cat 1 "both" 5
						-cw 2 65 -cal 2 "center" -cat 2 "both" 1
						-cw 3 140 -cal 3 "center" -cat 3 "both" 5
						-cw 4 80 -cal 4 "center" -cat 4 "both" 5
					"EnglishLCol"`;
	
		text -height 20 -align "center" -label "English Equiv. Diameter";
		text -height 20 -label "Gauge";
		text -height 20 -align "center" -label "         English Equiv. Length";
		text -height 20 -label "";
		
	setParent..;
	
	string $WSEnglishL = `rowColumnLayout -enable 1 -nc 6
						-cw 1 65 -cal 1 "center" -cat 1 "both" 8
						-cw 2 60 -cal 2 "left" -cat 2 "both" 1
						-cw 3 60 -cal 3 "center" -cat 3 "both" 5
						-cw 4 40 -cal 4 "center" -cat 4 "both" 5
						-cw 5 80 -cal 5 "center" -cat 5 "both" 5
						-cw 6 75 -cal 6 "left" -cat 6 "both" 1
					"EnglishCol"`;
	
		floatField -editable false -precision 3 "WSDiamFloatField";
		text -height 20 -label "inches";
		
		intField -editable false  "WSDiamIntField";
		text -height 20 -align "center" -label " ";
		
		floatField -editable false -precision 2 "WSLengthFloatField";
		text -height 20 -label "inches";
		
	setParent..;
	
	separator -h 10 -style "in";
	
	
// Int Slider Group for Quantity of Groups Required
	
		intSliderGrp -cal 1 "right" -cal 2 "center" -cal 3 "right"
					-adjustableColumn 3
					-columnWidth3 140 50 150
					-label " No. of Screws Required :-" 
					-field true
					-minValue 1 
					-maxValue 100
					-step 1
					-value 1
				WSItemsReqSliderGrp;
		
		separator -h 10 -style "double";
			 
			text -height 5 -bgc 1 1 0.85 -label "";
			text -height 15 -bgc 1 1 0.85 -align "left"
				-label " Note:- Select Screw Type, then Head, then Drive Type.";
			text -height 15 -bgc 1 1 0.85 -align "left" -font "boldLabelFont"
				-label " If different Sizes required run again to suit.";
			text -height 5 -bgc 1 1 0.85 -label "";
			separator -h 10 -style "double";
		
			
		string $WSCol = `columnLayout -cw 435 -cal "center" -cat "both" 5 "WSCol"`;	
			
		text -height 15 -font "boldLabelFont" -label " - Select Type of Screw Required - ";
		separator -h 5 -style "in";
		
	setParent..;
		
		string $WSScrewType = `rowColumnLayout -enable 1 -nc 6
						-cw 1 72 -cal 1 "center" -cat 1 "both" 1
						-cw 2 70 -cal 2 "center" -cat 2 "both" 1
						-cw 3 70 -cal 3 "center" -cat 3 "both" 1
						-cw 4 70 -cal 4 "center" -cat 4 "both" 1
						-cw 5 70 -cal 5 "center" -cat 5 "both" 1
						-cw 6 70 -cal 6 "center" -cat 6 "both" 1
					"WSType"`;
	
			iconTextRadioCollection ScrewRadioCollection;
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_WoodScrew01.xpm" -l "WoodScrew";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Decking01.xpm" -l "DeckScrew";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_TwinThread01.xpm" -l "TwinThread";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_FullThread01.xpm" -l "ChipBoard";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_DryWall01.xpm" -l "DryWall";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_SelfTapper01.xpm" -l "SelfTapper";

	setParent..;
	
		string $WSSCol = `columnLayout -cw 435 -cal "center" -cat "both" 5 "WSSCol"`;	

		separator -h 10 -style "double";
		text -height 15 -font "boldLabelFont" -label " - Select Type of Screw Head Required - ";
		separator -h 5 -style "in";
		
	setParent..;

		string $WSEnglish = `rowColumnLayout -enable 1 -nc 5
						-cw 1 80 -cal 1 "center" -cat 1 "both" 1
						-cw 2 80 -cal 2 "center" -cat 2 "both" 1
						-cw 3 80 -cal 3 "center" -cat 3 "both" 1
						-cw 4 80 -cal 4 "center" -cat 4 "both" 1
						-cw 5 80 -cal 5 "center" -cat 5 "left" 1
					"EnglishHCol"`;

		iconTextRadioCollection HeadRadioCollection;
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_ConterSunk.xpm" -l "CounterSink";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_OvalHead.xpm" -l "Oval";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_RoundHead.xpm" -l "Round";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_PanHead.xpm" -l "Pan";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_CheeseHead.xpm" -l "Cheese";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Hexagon.xpm" -l "Hexagon";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_HexagonWashered.xpm" -l "Hex-Washer";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_SlottedHexagon.xpm" -l "Slotted-Hex";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_SquareHead.xpm" -l "Square";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_TrussHead.xpm" -l "Truss";
			
	setParent..;

		string $WSSlotCol = `columnLayout -cw 435 -cal "center" -cat "both" 5 "WSSlotCol"`;	
		
			separator -h 10 -style "double";
			text -height 15 -font "boldLabelFont" -label " - Select Type of Screw Driver Required - ";
			separator -h 5 -style "in";
	
	setParent..;
	
		string $WSSlot = `rowColumnLayout -enable 1 -nc 8
						-cw 1 52 -cal 1 "center" -cat 1 "both" 1
						-cw 2 52 -cal 2 "center" -cat 2 "both" 1
						-cw 3 54 -cal 3 "center" -cat 3 "both" 1
						-cw 4 55 -cal 4 "center" -cat 4 "both" 1
						-cw 5 55 -cal 5 "center" -cat 5 "both" 1
						-cw 6 55 -cal 6 "center" -cat 6 "both" 1
						-cw 7 52 -cal 7 "center" -cat 7 "both" 1
						-cw 8 60 -cal 8 "center" -cat 8 "both" 1
						
					"WSSlotCol"`;

		iconTextRadioCollection SlotRadioCollection;
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_None.xpm" -l "None";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Slotted.xpm" -l "Slotted";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Phillips.xpm" -l "Phillips";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Pozidrive.xpm" -l "Pozidrive";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Hex.xpm" -l "Hexagon";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Robertson.xpm" -l "Square";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Torx.xpm" -l "Torx";
			iconTextRadioButton -h 48 -font "smallBoldLabelFont" -st "iconAndTextVertical" -i1 "DVY_Combination.xpm" -l "Combined";

		setParent $Tabs[0];
	setParent $Tab;
	
//////////////////////////////////////////////////////////////////////////////////
//					Help and Info Tab.
//////////////////////////////////////////////////////////////////////////////////	
// Tab Layout for Help and Info Tab
	
	$Tabs[1] = `columnLayout -adj 1 "Help and Info "`;

		string $HelpM = `frameLayout -height 490 -labelVisible 0 -label "Help & Info" -bs "in" "Help"`;
	
			columnLayout -adj 1 ;
			
				text -height 5-label "";
				separator -h 10 -style "double";
				text -bgc 0.7 1 0.7  -height 20 -align "center" -label "Help Section ";
				
				separator -h 10 -style "double";
				text -height 5-label "";
		
				scrollField -height 375 -bgc 1 1 0.85 -wordWrap true -editable false
				-text " To use this these scripts. \n\nSelect Diameter required. Then Select Length required. \nThe GUI will calculate and display nearest English equivalents for Diameter, Gauge and Length. \nThe Standard Pitches used are for Metric sizes and equivalents are displayed. \nSelf Tappers use different pitches for certain Diameters / Gauges. \n\nThen select Screw Type (WoodScrew, Decking Screw, Twin Threaded, ChipBoard, DryWall or Self Tapper). \nThen select quantity to be produced. \nEach `Group` Node produced will contain one screw only. \nIf More than one required the Group Node will be parented under a `MainScrew` Group node. \n\nIf other Sizes of items required re-run to suit needs. \nEach Thread is a Nurbs Surface parented under the Polygon Shape Tranform Node. \n\n Each Threaded item has been setup that when moved in the `Y` axis the item will Rotate in `Y` axis at a rate to match the pitch of the thread";	
				text -height 5-label "";
	
		setParent $Tabs[1];

	setParent $MainPanel;	

// Build it.

	frameLayout -cll 0 -vis 1 -lv 0 -label "Build" -la "center" -bs "out";
	
	columnLayout -enable 1 -adj 1 -cat "left" 1 -cal "center" ;
		
		separator -h 5 -style "none";

		button -height 40 -bgc 0.7 0.7 1 -label "Build"
			-command " print \"\\n Building Screws as Required Davvey © 2006..\\n\"; DVY_WoodScrew;"
				Screw_Builder;	

		separator -h 10 -style "none";

	setParent..;		
	
//Show the DVY_Screws UI Window.
	
	showWindow DVY_ScrewsWindow;

		
}

 
//-----------------------------------------------------------------

global proc DVY_ScrewCallback (int $S)
{
	
	global float $ThreadLength[], $ThreadLengthL[], $ThreadPitch[], $ThreadPitchST[];
	global int $SW, $SWL, $ST, $STW;
	string $WSname = `optionMenu -q -v DVY_WSDiamOption`;
	string $WSLname = `optionMenu -q -v DVY_WSLengthOption`;
	float $Diameter, $length, $WSLength;
	string $WSbuffer[], $WSLbuffer[];
	int $ScrewGauge[] = {0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 14, 16, 18, 20, 24};
	$ThreadPitch =     {24, 24, 24, 24, 22, 20, 17, 16, 15, 14, 13, 12, 11, 10, 10, 9,  9,  8};
	$ThreadPitchST =   {22, 22, 22, 22, 20, 19, 18, 16, 15, 14, 13, 12, 11, 10, 10, 9,  9,  9};
	
	
	int $Idx, $IdxL;
 	$numTokens = `tokenize $WSname " " $WSbuffer`;
	
	if ($WSbuffer[0] == "2.0")  {$Diameter = 2.0; $Idx = 2;}
	if ($WSbuffer[0] == "2.5")  {$Diameter = 2.5; $Idx = 3;}
	if ($WSbuffer[0] == "3.0")  {$Diameter = 3.0; $Idx = 4;}
	if ($WSbuffer[0] == "3.25") {$Diameter = 3.25; $Idx = 5;}
	if ($WSbuffer[0] == "3.5")  {$Diameter = 3.5; $Idx = 6;}
	if ($WSbuffer[0] == "3.75") {$Diameter = 3.75; $Idx = 7;}
	if ($WSbuffer[0] == "4.0")  {$Diameter = 4.0; $Idx = 8;}
	if ($WSbuffer[0] == "4.5")  {$Diameter = 4.5; $Idx = 9;}
	if ($WSbuffer[0] == "5.0")  {$Diameter = 5.0; $Idx = 10;}
	if ($WSbuffer[0] == "5.5")  {$Diameter = 5.5; $Idx = 11;}
	if ($WSbuffer[0] == "6.0")  {$Diameter = 6.0; $Idx = 12;}
	if ($WSbuffer[0] == "6.5")  {$Diameter = 6.5; $Idx = 13;}
	if ($WSbuffer[0] == "7.0")  {$Diameter = 7.0; $Idx = 14;}
	if ($WSbuffer[0] == "7.5")  {$Diameter = 7.5; $Idx = 15;}
	if ($WSbuffer[0] == "8.0")  {$Diameter = 8.0; $Idx = 16;}
	if ($WSbuffer[0] == "9.5")  {$Diameter = 9.5; $Idx = 17;}
	$SW = $Idx;
	
	$WSTlength = $ThreadLength[$Idx];
	$Diameter = ceil($Diameter * 1000/25.4)/1000;
	$Pitch = $ThreadPitch[$Idx];
		
	if ($S == 1)
		{// Se Diamter values in UI
			print ( "Diameter selected is " + $WSbuffer[0] + " and English equivalent is " + $Diameter + 
				" ins and Screw Gauge is " + $ScrewGauge[$Idx] + " © Davvey..\n");
	
			floatField -edit -value $Diameter WSDiamFloatField;
			intField -edit -value $ScrewGauge[$Idx] WSDiamIntField;
		}
		
	if ($S == 2)
		{// Set Length values in UI
			$numTokensL = `tokenize $WSLname " " $WSLbuffer`;
			$SWL = $WSLength = $WSLbuffer[0];
			$WSLength = ceil ($WSLength * 1000/25.4)/1000;
			
			print ("Screw Length is " +  $WSLbuffer[0] + " and english equivalent is " + $WSLength + " inches © Davvey..\n");
			floatField -edit -value $WSLength WSLengthFloatField;
		}
		
}// End of DVY_ScrewCallback Procedure


global proc string DVY_Spiral( float $ht, float $radius, float $numRounds )
//
//	Description:
//		This proc creates a spiral centred about the origin, with a specific
//		height, radius and number of rounds/turns/cycles.
//
//		This is done by creating a cylinder of the correct size, then
//		creating a curve-on-surface on the cylinder (which is in
//		the form of a spiral), then duplicating the curve-on-surface
//		to get a 3D spiral.
//
{
	string $cylinder[] = `cylinder -ch off -ax 0 1 0 -p 0 0 0 -r 1.0 -hr 1.0`;
	scale $radius $ht $radius $cylinder[0];
	string $cos = `curveOnSurface -d 1 -uv 0.0 0.0 -uv 1.0 ($numRounds*8.0) $cylinder[0]`;
	string $duplicatedCrv[] = `duplicateCurve -ch off $cos`;

	delete $cos;
	delete $cylinder[0];

	return $duplicatedCrv[0];
	
}// End of DVY_Spiral procedure

global proc DVY_AboutScrewsWin()
 {
	global float $DVYTol;
	if ((`window -ex DavveyAboutScrewsWindow`) == true) 
		{
			deleteUI DavveyAboutScrewsWindow;
		}
		if (`windowPref -ex DavveyAboutScrewsWindow`) windowPref -remove DavveyAboutScrewsWindow;
		window -t " About:-  Davvey's WoodScrew and Self Tapper Generator." -width 425 -height 300 -sizeable 0 DavveyAboutScrewsWindow;
		//Build 'Edit' menu.
	
	string $menuBarLayout = `menuBarLayout -height 20`;
		menu -label "File"; 
 			menuItem -label "Close" -command "deleteUI DavveyAboutScrewsWindow";		


	setParent;
	setParent;

		columnLayout -adjustableColumn true -columnAttach "both" 5 -columnWidth 350; 
	
		text -height 2 -label " " ;	//Spacer
		separator -height 10 -style "double" ;
			text -bgc 0.5 0.5 1 -height 20 -align "center" -fn "boldLabelFont" -l "Davvey's WoodScrew and Self Tapper Generator..";
			text -bgc 0.5 0.5 1 -height 20 -align "center" -fn "boldLabelFont" -l "copyright (c) 2006 Dave Lake..";
		separator -height 8 -style "double" ;
		text -height 2 -label " " ;	//Spacer
		
	frameLayout -cl 0 -label "" -labelAlign "center" -borderStyle "etchedOut";
		columnLayout -adjustableColumn true -columnAttach "both" 2 -columnWidth 250; 
		
		text -bgc 1 1 0.8 -height 5 -align "left" -l " ";
		text -bgc 1 1 0.8 -height 20 -align "left" -fn "boldLabelFont" -l "  Special Thanks:- ";
		text -bgc 1 1 0.8 -height 20 -align "left" -fn "plainLabelFont" -l "  Thanks to my wife Jan for her support and patience during the time";
		text -bgc 1 1 0.8 -height 20 -align "left" -l "   its taken to learn Maya and how to write these scripts.";
		text -bgc 1 1 0.8 -height 10 -align "left" -l " ";
		text -bgc 1 1 0.8 -height 20 -align "left" -l "  Also dedicated to Jackie and Joanna (my expensive pride and joys!!)";
		text -bgc 1 1 0.8 -height 20 -align "left" -l "  Finally these Collected works are dedicated to the memory of Darryl.";
		text -bgc 1 1 0.8 -height 5 -align "left" -l " ";
		setParent ..;	
		setParent ..;	
		text -align "center" -l "email :- Davvey@ntlworld.com";
		text -align "center" -l "website :- www..............";
	setParent ..; 

	showWindow DavveyAboutScrewsWindow;
	
}// End of DVY_AboutScrewsWin Procedure
