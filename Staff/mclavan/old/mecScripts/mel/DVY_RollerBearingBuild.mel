/* This file downloaded from Highend3d.com
''  
''  Highend3d.com File Information:
''  
''    Script Name:  Davvey\'s Bearing Generator
''    Author: Davvey 
''    Last Updated: Jan 15, 2007
''    Update/Change this file at:
''    http://Highend3d.com/maya/downloads/mel_scripts/modeling/poly_tools/1027.html
''  
''  Please do not alter any information above this line
''  it is generated dynamically by Highend3d.com and will
''  be changed automatically on any updates.
*/

//////////////////////////////////////////////////////////////////////////////////////
//	Title Section

//						-  DVY_RollerBearingBuild -


//////////////////////////////////////////////////////////////////////////////////////
//	Description and Usage Section
/*

	Called by DVY_Bearings to build and rig various styles of Roller Bearings and 
	then add basic Shaders to each part.
		
	After construction of the various parts the Inner and Outer rotations are 
	connected to the Roller and Cage rotations. Inside and Outside can be rotated 
	in Y Axis independantly.
	
	Self aligning Bearings can also be rotated in X and Y and Roller and Cages will
	also rotate  as required.
	
	All Bearings are produced to Metric Bearing Standards and the Size / Scale is
	correctly set to suit Maya's user preferences settings.


*/		
//////////////////////////////////////////////////////////////////////////////////////


global proc DVY_RollerBearingBuild()
{

	print "Start of DVY_RollerBearingBuild procedure. © Davvey..\n";

	if (`optionMenu -q -sl DVY_Roller_ID` == 1)
		{
			error "Please select Bearing Inside Diameter © Davvey..\n";
		}

	
// ******************************************************************************** //	
//	Global Variables
	
	global string $Units;

	global float $DVYUnit;

// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Local Variables
	string $Temp[], $Temps[], $DVYBushCurve, $Groups[], $DVYBush[], $Material;
	string $BrName, $BrGroup[];
	string $BType;
	int $a, $b, $c, $E, $i, $j, $k, $Rot, $S, $T, $t;
	float $Ch, $ID, $OD, $R1, $R2, $Sc, $Width;
	float $Pos[];
	
	
	string $BSeries = `optionMenu -q -v DVY_RollerSeries`;
	string $BType = `optionMenu -q -v DVY_RollerType`;
	
	int $Q = `intField -q -v BIntField_2`;
	float $q = 360.0/($Q);
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
	
	$E = 1;
	
	$ID = `optionMenu -q -v DVY_Roller_ID`;
	$OD = `floatField -q -v BFloatField_22`;
	$Width = `floatField -q -v BFloatField_24`;
	float $BrRht = $Width * 1.6;
	
	if (`optionMenu -q -sl DVY_RollerType` == 4 )
		{
			$Width = $Width * 1.3;
			$BrRht = $Width * 0.8;
		}
		
	if (`optionMenu -q -sl DVY_RollerType` == 6 )
		{
			$Width = $Width * 1.6;
			$BrRht = $Width * 0.8;
		}
		
		
	float $BrPCD = ($OD+$ID) * 0.5;
	float $Th;
		
	$R1 = 1;
	$R2 = 1;
	$Ch = $Width * 0.01;
	$BD =  `floatField -q -v BFloatField_26`;
	$BrName = ($BSeries + "_" + $BType);
	
	if (`optionMenu -q -sl DVY_RollerType` == 3 )
		{	$BrName = ($BType); }
	
	print ("$BrName is " + $BrName + "\n");
	print ("Roller Bearing Diameter is " + $BD + ". © Davvey..\n");
	print ("No. of Roller Bearings is " + $Q + ". © Davvey..\n");
	
	print ("Bearing ID is " + $ID + ". © Davvey..\n");
	print ("Bearing OD is " + $OD + " . © Davvey..\n");
	print ("Bearing PCD is " + $BrPCD + " . © Davvey..\n");
	print ("Bearing Width is " + $Width + ". © Davvey..\n");
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Set Scaling unit for Global units used.
		
	DVY_ScaleSet;
//	print ("Current units are " + $Units + " and Scale Factor $DVYUnit is " + $DVYUnit + "\n");
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
//	Create Shaders for Bearing Parts.

	$SHbName = "Bearing_SH";
	$SHcName = "Cage_SH";

		if(!`objExists $SHbName`)
			{
				$Shader[0] = DVY_Shaders(32) ;
		 	}	
			$Shader[0] = $SHbName;
				
		if(!`objExists $SHcName`)
			{
				$Shader[1] = DVY_Shaders(31); 
		 	}	
			$Shader[1] = $SHcName;
	
		print "$Shaders are \n";
			print $Shader;
	
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Generate and Use new Top Group Node
	 while(`objExists ($BrName + "_RollerBearing_Main_GrpN_" + $E)`)
		  {
			 $E++;	print ("$E is " + $E + "\n");
		  }
			$BrGroup[0] = `group -em -name ($BrName + "_RollerBearing_Main_GrpN_" + $E)`;
//				print ("Group is called " + $BrGroup[0] + "\n");
			
				
	// Roller Race for Inner Bearing	
	if (`optionMenu -q -sl DVY_RollerType` == 1 )
		{// Build section for Single Standard InnerRace.
			$Th = (($BrPCD * 0.5) - ($BD * 0.3))  - ($ID * 0.5);
			print ("$Th is " + $Th + "\n");
			$Temp = `polyPipe -r (($BrPCD * 0.5) - ($BD * 0.3)) -h ($Width *2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
		
			polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
					-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
					-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
			
			$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;

			$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
			
			$BrGroup[5] = `rename $Temp[0] ($BrName + "_InnerRace_" + $E)`;

		}// End of build section for Single Standard InnerRace.
		
		
	if (`optionMenu -q -sl DVY_RollerType` == 2 )
		{// Build section for Single Standard InnerRace.
			$Th = (($BrPCD * 0.5) - ($BD * 0.3))  - ($ID * 0.5);
			print ("$Th is " + $Th + "\n");
			$Temp = `polyPipe -r (($BrPCD * 0.5) - ($BD * 0.3)) -h ($Width *2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
		
			polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
					-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
					-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
			
			$Sc = 3.25 * $Width/$BD;
				$Temps = `polyTorus -r ($BrPCD * 0.52) -sr ($BD * 0.645) -tw 0 -sx 36 -sy 18 -ax 0 1 0 -ch 0 -name "BallChannel_1"`;
					scale 1 $Sc 1 $Temps[0];
					
			$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
			
			$BrGroup[5] = `rename $Temp[0] ($BrName + "_InnerRace_" + $E)`;

		}// End of build section for Self Align Sphercal Roller InnerRace.
		
	if (`optionMenu -q -sl DVY_RollerType` == 3 )
		{// Build section for Needle Roller InnerRace.
			$Th = (($BrPCD * 0.5) - ($BD * 0.5))  - ($ID * 0.5);
			print ("$Th is " + $Th + "\n");
			$Temp = `polyPipe -r (($BrPCD * 0.5) - ($BD * 0.5)) -h ($Width *2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
		
			polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
					-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
					-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
			
			$BrGroup[5] = `rename $Temp[0] ($BrName + "_InnerRace_" + $E)`;
	
		}// End of build section for Needle Roller InnerRace.
		
		
	if (`optionMenu -q -sl DVY_RollerType` == 4 )
		{// Build section for Double Roller Standard InnerRace.
			
			$Th = (($BrPCD * 0.5) - ($BD * 0.3))  - ($ID * 0.5);
			print ("$Th is " + $Th + "\n");
			$Temp = `polyPipe -r (($BrPCD * 0.5) - ($BD * 0.3)) -h ($Width *2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
		
			polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
					-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
					-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
			
			$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
				move -r 0 ($Width * 0.25) 0 $Temps[0];

			$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
			
			$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
				move -r 0 ($Width * -0.25) 0 $Temps[0];

			$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;

			$BrGroup[5] = `rename $Temp[0] ($BrName + "_InnerRace_" + $E)`;
			
		}// End of build section for Double Roller Standard InnerRace.
		
			
	if (`optionMenu -q -sl DVY_RollerType` == 5 )
		{// Build section for Single Tapered InnerRace.
			
			$Temp = `polyCylinder -r ($BD * 0.5) -h ($BrRht * 0.49) -sx 20 -sy 1 -ax 0 1 0 -ch 1 -name ("_RollerBearing_")`;
				$BrGroup[10] = $Temp[0];	
					rotate -r 0 0 10 $BrGroup[10];
					move -r ($BrPCD * 0.5) 0 0 $BrGroup[10];
					$a = 0;
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.50) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * -0.475) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.505) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * -0.49) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.52) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * -0.50) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[6]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Width * -0.5) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[6]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.03) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[9]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.02) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[29]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.02) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[26]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.03) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
		
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[26]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Width * 0.5) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.52) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * 0.50) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.505) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * 0.49) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.50) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * 0.475) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.50) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * -0.475) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
				
				$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 1 -rn 0 -po 0 -rsn true $Temps`;
					$Tmp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01
										-mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 
										-cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $Temp[0]`;
							polySewEdge -t 0.1  -ws 1 -ch 1 $Tmp[0];
			
			select -r $Temps $Temp;
			delete;
			
		$BrGroup[5] = `rename $Tmp[0] ($BrName + "_InnerRace_" + $E)`;
		
	}// End of Build section for Single Tapered InnerRace.
	
	if (`optionMenu -q -sl DVY_RollerType` == 6 )
		{// Build section for Double Tapered InnerRace.
			
			$Temp = `polyCylinder -r ($BD * 0.5) -h ($BrRht * 0.5) -sx 20 -sy 1 -ax 0 1 0 -ch 1 -name ("_RollerBearing_")`;
				$BrGroup[10] = $Temp[0];	
					rotate -r 0 0 10 $BrGroup[10];
					move -r ($BrPCD * 0.5) 0 0 $BrGroup[10];
					$a = 0;

			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.52) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * -0.25) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[6]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Width * -0.25) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[6]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.03) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[9]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.02) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[29]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.02) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[26]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.03) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
		
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[26]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Width * 0.25) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.52) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * 0.25) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.505) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * 0.245) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.50) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * 0.235) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
			
			$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r ($ID * 0.50) -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
				move -r 0 ($Width * -0.25) 0 $Temp[0];
				$Temps[$a++] = $Temp[0];
				
				$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 1 -rn 0 -po 0 -rsn true $Temps`;
					$Tmp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01
										-mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 
										-cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $Temp[0]`;
							polySewEdge -t 0.1  -ws 1 -ch 0 $Tmp[0];
							
			select -r $Temps $Temp;
			delete;
			
			move -r 0 ($Width * 0.25) 0 $Tmp[0];
			select -r $Tmp[0];
			$Temp = `duplicate -rr`;
			move -r 0 ($Width * -0.5) 0 $Temp[0];
			rotate 180 0 0 $Temp[0];
			
			$Tmp = `polyBoolOp -name "InnerRace_1"  -op 1 -ch 0 $Temp[0] $Tmp[0]`;
			select -r $Tmp;
			delete -ch;
			
		$BrGroup[5] = `rename $Tmp[0] ($BrName + "_InnerRace_" + $E)`;

	}// End of Build section for Double Tapered InnerRace.
	
		
		select -r $BrGroup[5];
			hyperShade -assign "initialShadingGroup";
			hyperShade -assign $Shader[0];

			
// End of build Section for Roller Race for Inner Bearing	
			
// -------------------------------------------------------------------------------- //
	
// ******************************************************************************** //	
// Build Section for Roller Bearings	
			
	// Build a Single Roller Bearing	
							
	if (`optionMenu -q -sl DVY_RollerType` == 2 )
		{
			$Temp = `polyCylinder -r ($BD * 0.5) -h ($BrRht * 0.49) -sx 18 -sy 4 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerBearing_")`;
				scale 0.95 1 0.95 ($Temp[0] + ".vtx[18:35]");
				scale 0.95 1 0.95 ($Temp[0] + ".vtx[54:71]");
					scale 0.85 1 0.85 ($Temp[0] + ".vtx[0:17]");
					scale 0.85 1 0.85 ($Temp[0] + ".vtx[72:89]");
						polyBevel -offset 0.1 -offsetAsFraction 1 -autoFit 1 -segments 1 -worldSpace 0 
								-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
								-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".f[72:73]") ;
										
				$Temps = `polyCylinder -r ($BD * 0.1) -h ($BrRht * 0.55) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerPin_1")`;
												
					$Temp = `polyBoolOp -name ($BrName +  "_" + $E + "_RollerBearing_1") -op 1 -ch 0 $Temp[0] $Temps[0]`;
						
				move -r ($BrPCD * 0.5) 0 0 $Temp[0];
		}				
							
	if (`optionMenu -q -sl DVY_RollerType` != 2 )
		{
			$Temp = `polyCylinder -r ($BD * 0.5) -h ($BrRht * 0.49) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerBearing_")`;
						polyBevel -offset 0.1 -offsetAsFraction 1 -autoFit 1 -segments 1 -worldSpace 0 
							-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
							-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".f[18:19]") ;
								
					if (`optionMenu -q -sl DVY_RollerType` != 3 )
						{$Temps = `polyCylinder -r ($BD * 0.1) -h ($BrRht * 0.55) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerPin_1")`;
								
								$Temp = `polyBoolOp -name ($BrName +  "_" + $E + "_RollerBearing_1") -op 1 -ch 0 $Temp[0] $Temps[0]`;
						}
						
						if ((`optionMenu -q -sl DVY_RollerType` == 5 ) || (`optionMenu -q -sl DVY_RollerType` == 6 ))
							{ rotate -r 0 0 10 $Temp[0];}
							
			move -r ($BrPCD * 0.5) 0 0 $Temp[0];
			
			

		}
		
		select -r $Temp[0];
			hyperShade -assign "initialShadingGroup";
			hyperShade -assign $Shader[0];
						
	// End of build a Single Roller Bearing	
		
		select -cl;
		
	// Group Nodes for Bearing Sections.
		
		$BrGroup[1] = `group -em -name ($BrName +  "_" + $E + "_Bearing_1" )`;
		$BrGroup[2] = `group -em -name ($BrName +  "_" + $E + "_Bearing_GrpN_1" )`;
			parent $BrGroup[2] $BrGroup[1];
			parent $BrGroup[1] $BrGroup[0];
		
		$Group[0] = `group -em -name ($BrName +  "_" + $E + "_Roller_Bearing_Grp_1")`;
		$Group[1] = `group -em -name ($BrName +  "_" + $E + "_Roller_Bearings_GrpN_1")`;
			
		parent $Temp[0] $Group[0];
			parent $Group[0] $Group[1];
			parent $Group[1] $BrGroup[2];	
			
		select -r $Group[1];
		
	// Duplicate number of Roller Bearings Required	

	duplicate -rr -renameChildren;
		rotate -r 0 $q 0;
			for ($i=1; $i<($Q-1); ++$i) 
				{duplicate -rr -renameChildren -st;}

		
		if (`optionMenu -q -sl DVY_RollerType` == 1 )
			{// Roller Race for OuterRace Standard Bearing	

				$Th = ($OD * 0.5) - ($BrPCD *0.5) - ($BD *0.3);
					$Temp = `polyPipe -r ($OD * 0.5) -h ($Width * 2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "OutsideBore_1"`;
						polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
								-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
								-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
						
						$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
		
							$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
				
						$BrGroup[6] = `rename $Temp[0] ($BrName + "_OuterRace_" + $E)`;
		
			}// End of Roller Race for Outer Standard Bearing	
			
		if (`optionMenu -q -sl DVY_RollerType` == 2 )
			{// Build section for Self Align Sphercal Roller 

				$Th = ($OD * 0.5) - ($BrPCD *0.5) - ($BD *0.3);
					$Temp = `polyPipe -r ($OD * 0.5) -h ($Width * 2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "OutsideBore_1"`;
						polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
								-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
								-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
						
						$Sc = 2.25 * $Width/$BD;
							$Temps = `polyTorus -r ($BrPCD * 0.52) -sr ($BD * 0.37) -tw 0 -sx 36 -sy 18 -ax 0 1 0 -ch 0 -name "BallChannel_1"`;
								scale 1 $Sc 1 $Temps[0];
								
						$Temp = `polyBoolOp -name "OuterRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
						
						$BrGroup[6] = `rename $Temp[0] ($BrName + "_OuterRace_" + $E)`;
						
		
			}// End of build section for Self Align Sphercal Roller 
			
		if (`optionMenu -q -sl DVY_RollerType` == 3 )
			{// Roller Race for OuterRace Standard Bearing	

				$Th = ($OD * 0.5) - ($BrPCD * 0.5) - ($BD *0.1);
					$Temp = `polyPipe -r ($OD * 0.5) -h ($Width * 2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "OutsideBore_1"`;
						polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
								-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
								-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
						
						$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
		
							$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
				
						$BrGroup[6] = `rename $Temp[0] ($BrName + "_OuterRace_" + $E)`;
						
	//		select -r $Temp[50];
		
			}// End of Roller Race for Outer Standard Bearing	
			
			
	if (`optionMenu -q -sl DVY_RollerType` == 4 )
		{// Roller Race for OuterRace Double Roller Bearing	

			$Th = ($OD * 0.5) - ($BrPCD *0.5) - ($BD *0.3);
				$Temp = `polyPipe -r ($OD * 0.5) -h ($Width * 2) -t ($Th) -sa 36 -sh 1 -sc 1 -ch 0 -name "OutsideBore_1"`;
					polyBevel -offset 0.2 -offsetAsFraction 1 -autoFit 1 -segments 3 -worldSpace 0 
							-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
							-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".e[0:143]") ;
					
					$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
	
						$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
							move -r 0 ($Width * 0.25) 0 $Temp[0];
			
					$Temps = `polyPipe -r (($BrPCD * 0.5) + ($BD * 0.5)) -h ($BrRht) -t ($BD * 1) -sa 36 -sh 1 -sc 1 -ch 0 -name "InsideBore_1"`;
	
						$Temp = `polyBoolOp -name "InnerRace_1"  -op 2 -ch 0 $Temp[0] $Temps[0]`;
							move -r 0 ($Width * -0.25) 0 $Temp[0];
						
				$BrGroup[6] = `rename $Temp[0] ($BrName + "_OuterRace_" + $E)`;
	
		}// End of Roller Race for Outer Double Roller Bearing	
			
			
	if (`optionMenu -q -sl DVY_RollerType` == 5 )
		{// Build section for Single Tapered OuterRace.
			$a = 0;
			scale 1 2 1 $BrGroup[10];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[19]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.03) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[39]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.02) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			
			$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 1 -rn 0 -po 0 -rsn true $Temps`;
				$Tmp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01
								  -mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 
								  -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $Temp[0]`;
						polyCloseBorder -ch 0 $Tmp[0];			
						polySubdivideFacet -dv 1 -m 1 -ch 0 ($Tmp[0] + ".f[36]") ($Tmp[0] + ".f[37]");
				
			select -r $Temps $Temp;
			delete;
			
			$Temp = `polyCylinder -r ($OD * 0.5) -h ($Width * 1.0) -sx 36 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_OuterRace_1")`;
			
				polyBevel -offset 0.1 -offsetAsFraction 1 -autoFit 1 -segments 2 -worldSpace 0 
							-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
							-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".f[36:37]") ;
			
						polySubdivideFacet -dv 1 -m 1 -ch 0 ($Temp[0] + ".f[36]") ($Temp[0] + ".f[37]");
			
			$Temps = `polyBoolOp -op 2 -ch 0 $Temp[0] $Tmp[0]`;
			
		$BrGroup[6] = `rename $Temps[0] ($BrName + "_OuterRace_" + $E)`;
		
	}// End of build section for Single Tapered OuterRace.
			
	if (`optionMenu -q -sl DVY_RollerType` == 6 )
		{// Build section for Double Tapered OuterRace.
			$a = 0;
			scale 1 2 1 $BrGroup[10];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[19]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.03) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[39]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1.02) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			
			$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 1 -rn 0 -po 0 -rsn true $Temps`;
				$Tmp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01
								  -mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 
								  -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $Temp[0]`;
						polyCloseBorder -ch 0 $Tmp[0];			
						polySubdivideFacet -dv 1 -m 1 -ch 0 ($Tmp[0] + ".f[36]") ($Tmp[0] + ".f[37]");
				
			select -r $Temps $Temp;
			delete;
			
			$Temp = `polyCylinder -r ($OD * 0.5) -h ($Width * 0.5) -sx 36 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_OuterRace_1")`;
				polyBevel -offset 0.1 -offsetAsFraction 1 -autoFit 1 -segments 2 -worldSpace 0 
							-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
							-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".f[37]") ;
						polySubdivideFacet -dv 1 -m 1 -ch 0 ($Temp[0] + ".f[36]") ($Temp[0] + ".f[37]");
			
			$Temps = `polyBoolOp -op 2 -ch 0 $Temp[0] $Tmp[0]`;
				move -r 0 ($Width * 0.25) 0 $Temps[0];
			
			$Pos = `xform -q -ws -t ($Temps[0] + ".vtx[30]")`;
			select -r $Temps[0];
				$Temp = `duplicate -rr`;
				rotate 180 0 0 $Temp[0];
				move -r 0 ($Width * -0.5) 0 $Temp[0];
			
			$Temps = `polyBoolOp -op 1 -ch 0 $Temps[0] $Temp[0]`;
			
				$Temp = `polyPipe -r ($OD * 0.5)  -h ($Width * 0.5) -t ($OD * 0.5 + $Pos[0]) -sa 36 -sh 1 -sc 1 -ch 0 -name "OutsideBore_1"`;
			
				$Temps = `polyBoolOp -op 1 -ch 0 $Temp[0] $Temps[0]`;
			
		$BrGroup[6] = `rename $Temps[0] ($BrName + "_OuterRace_" + $E)`;
			
	}// End of build section for Double Tapered OuterRace.
	
		select -r $BrGroup[6];
			hyperShade -assign "initialShadingGroup";
			hyperShade -assign $Shader[0];
		
	select -cl ;
	
			
	if ((`optionMenu -q -sl DVY_RollerType` == 5 ) || (`optionMenu -q -sl DVY_RollerType` == 6 ))
		{// Build section for Roller Cage Ring for Tapered Bearing.
			clear $Temps;
			$a = 0;
			scale 0.30 1.075 0.30 $BrGroup[10];	
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[9]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
		
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[19]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[39]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[29]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Pos = `xform -q -ws -t ($BrGroup[10] + ".vtx[9]")` ;
				$Temp = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r $Pos[0] -d 3 -ut 0 -tol 0.01 -s 36 -ch 0`; 
					move -r 0 ($Pos[1] * 1) 0 $Temp[0];
					$Temps[$a++] = $Temp[0];
			
			$Temp = `loft -ch 1 -u 0 -c 0 -ar 1 -d 1 -ss 1 -rn 0 -po 0 -rsn true $Temps`;
				$Tmp = `nurbsToPoly -mnd 1 -ch 0 -f 3 -pt 0 -pc 200 -chr 0.1 -ft 0.01
								  -mel 0.001 -d 0.1 -ut 1 -un 3 -vt 1 -vn 3 -uch 0 -ucr 0 
								  -cht 0.2 -es 0 -ntr 0 -mrt 0 -uss 1 $Temp[0]`;
					polySewEdge -t 0.1  -ws 1 -ch 1 $Tmp[0];
			
			select -r $Temps $Temp;
			delete;
			
		$BrGroup[7] = `rename $Tmp[0] ($BrName + "_RollerCage_" + $E)`;
			
		//Tapered Roller Bearing CageCutOut
			
			$Temp = `polyCylinder -r ($BD * 0.5) -h ($BrRht * 0.49) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerBearing_")`;
			
					polyBevel -offset 0.1 -offsetAsFraction 1 -autoFit 1 -segments 1 -worldSpace 0 
							-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
							-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".f[18:19]") ;
							
							
			$Temps = `polyCylinder -r ($BD * 0.1) -h ($BrRht * 0.55) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerPin_1")`;
			
			$Temp = `polyBoolOp -name "RollerCutOut_1" -op 1 -ch 0 $Temp[0] $Temps[0]`;
			rotate 0 0 10 $Temp[0];
			scale 1.1 1.025 1.1 $Temp[0];
			move -r ($BrPCD * 0.5) 0 0 $Temp[0];
			xform -ws -piv 0 0 0 $Temp[0];
				
			for ($i=1; $i<$Q; $i++)
				{
					select -r $Temp[0];
					$Temps = `duplicate -rr -renameChildren`;
					rotate -r -ws 0 ($q*$i) 0 $Temps[0];
					$Temp[$i] = $Temps[0];
				}
				
			$Temps = `polyBoolOp -name "CageCutOut_1" -op 2 -ch 0 $BrGroup[7] $Temp[0]`;
				
			for ($i=1; $i<$Q; $i++)
				{
					$Temps = `polyBoolOp -name "CageCutOut_1" -op 2 -ch 0 $Temps[0] $Temp[$i]`;
				}
					polySoftEdge -a 0 -ch 0 $Temps[0];

			$BrGroup[7] = `rename $Temps[0] ($BrName +  "_" + $E + "_Cage_" + $E)`;
			
			select -r $BrGroup[7];
				hyperShade -assign "initialShadingGroup";
				hyperShade -assign $Shader[1];
					
		}// End of build section for Roller Cage Ring for Tapered Bearing.
			
	if ((`optionMenu -q -sl DVY_RollerType` == 1 ) || (`optionMenu -q -sl DVY_RollerType` == 2 ) ||  (`optionMenu -q -sl DVY_RollerType` == 4 ))
		{// Build Section for Standard Roller  Cage Ring Section	
			
		$Temp = `polyPipe -r ($BrPCD * 0.5 + ($BD * 0.15)) -h ($BrRht * 1.075) -t ($BD * 0.3) -sa 36 -sh 1 -sc 1 -ch 0 -name "Cage_1"`;
		$BrGroup[7] = `rename $Temp[0] ($BrName + "CageRace_" + $E)`;
			
		// Roller Bearing CageCutOut
			$Temp = `polyCylinder -r ($BD * 0.5) -h ($BrRht * 0.49) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerBearing_")`;
					polyBevel -offset 0.1 -offsetAsFraction 1 -autoFit 1 -segments 1 -worldSpace 0 
							-fillNgons 1 -mergeVertices 1 -mergeVertexTolerance 0.0001 -smoothingAngle 30
							-miteringAngle 180 -angleTolerance 180 -ch 0  ($Temp[0] + ".f[18:19]") ;
						
				$Temps = `polyCylinder -r ($BD * 0.1) -h ($BrRht * 0.55) -sx 18 -sy 1 -ax 0 1 0 -ch 0 -name ($BrName + "_" + $E + "_RollerPin_1")`;
				
				$Temp = `polyBoolOp -name "RollerCutOut_1" -op 1 -ch 0 $Temp[0] $Temps[0]`;
					scale 1.1 1.025 1.1 $Temp[0];
					move -r ($BrPCD * 0.5) 0 0 $Temp[0];
					xform -ws -piv 0 0 0 $Temp[0];
					
				for ($i=1; $i<$Q; $i++)
					{
						select -r $Temp[0];
						$Temps = `duplicate -rr -renameChildren`;
						rotate -r -ws 0 ($q*$i) 0 $Temps[0];
						$Temp[$i] = $Temps[0];
					}
		
				$Temps = `polyBoolOp -name "CageCutOut_1" -op 2 -ch 0 $BrGroup[7] $Temp[0]`;
				
				for ($i=1; $i<$Q; $i++)
					{
						$Temps = `polyBoolOp -name "CageCutOut_1" -op 2 -ch 0 $Temps[0] $Temp[$i]`;
					}
					
					polySoftEdge -a 0 -ch 0 $Temps[0];
		
				$BrGroup[7] = `rename $Temps[0] ($BrName +  "_" + $E + "_Cage_" + $E)`;
				
			select -r $BrGroup[7];
				hyperShade -assign "initialShadingGroup";
				hyperShade -assign $Shader[1];

		}// End of build Section for Standard Roller Cage Ring Section	
		
		
		parent $BrGroup[5] $BrGroup[6] $BrGroup[0];
			
	select -cl;	
				
	// Duplicate Rollers and Cage for Double Roller Section.
	
	if (`optionMenu -q -sl DVY_RollerType` == 4 ) 
		{// Standard Double Rollers
			move -r 0 ($Width * 0.25) 0 $BrGroup[2];
			move -r 0 ($Width * 0.25) 0 $BrGroup[7];
			
			select -r $BrGroup[2];
				$Temp =`duplicate -rr -renameChildren`;
					move 0 ($Width * -0.25) 0 $Temp[0];
					$BrGroup[3] = $Temp[0] ;
			
			select -r $BrGroup[7];
				$Temp =`duplicate -rr -renameChildren`;
					move 0 ($Width * -0.25) 0 $Temp[0];
					$BrGroup[8] = $Temp[0] ;
			
		}
		
		
	if (`optionMenu -q -sl DVY_RollerType` == 6 ) 
		{// Double Tapered Rollers
			move -r 0 ($Width * 0.225) 0 $BrGroup[2];
			move -r 0 ($Width * 0.225) 0 $BrGroup[7];
			
			select -r $BrGroup[2];
				$Temp =`duplicate -rr -renameChildren`;
					rotate 180 0 0 $Temp[0];
					move 0 ($Width * -0.25) 0 $Temp[0];
					$BrGroup[3] = $Temp[0] ;
			
			select -r $BrGroup[7];
				$Temp =`duplicate -rr -renameChildren`;
					rotate 180 0 0 $Temp[0];
					move 0 ($Width * -0.25) 0 $Temp[0];
					$BrGroup[8] = $Temp[0] ;
			
		}
		
		// End of duplicate Rollers and Cage for Double Roller Section.
		
		
	string $AttrA[] = { ".tx", ".ty", ".tz", ".rx", ".rz", ".sx", ".sy", ".sz"};
	string $AttrB[] = { ".tx", ".ty", ".tz", ".rx", ".ry", ".rz"};
	string $AttrN[] = {".sx", ".sy", ".sz"};
	
	// Connect Roller Bearing to Inner Race Rotation.
		select -r  ($BrName + "_" + $E + "_RollerBearing_*");
			$Rollers = `ls -tr -sl`;
//			print $Rollers;
			
			for ($each in $Rollers)
				{
					connectAttr -f ($BrGroup[5] + ".ry")($each + ".ry");
					for ($Attr in $AttrA)
						{
							setAttr -l 1 -k 0 ($each + $Attr);
						}
				}
				
	// CenterPivot of  Roller Bearing Group Nodes and Connect to Outer Race Rotation.
		select -r  ($BrName + "_" + $E + "_Roller_Bearing_Grp_*");
			$Rollers = `ls -tr -sl`;
//			print $Rollers;
		
		for ($each in $Rollers)
			{
				select -r $each;
				CenterPivot;
				if (`optionMenu -q -sl DVY_RollerType` == 6 )
					{ xform -os -ra 0 0 -10 $each;}
					
					connectAttr -f ($BrGroup[6] + ".ry")($each + ".ry");
						for ($Attr in $AttrA)
							{
								setAttr -l 1 -k 0 ($each + $Attr);
							}
			}

	if (`optionMenu -q -sl DVY_RollerType` != 3 )
		{
			parent $BrGroup[7] $BrGroup[2];
		}
	
	if ((`optionMenu -q -sl DVY_RollerType` == 4 ) || (`optionMenu -q -sl DVY_RollerType` == 6 ))
		{
			parent $BrGroup[8] $BrGroup[3];
		}
	
	
		
	$Group[4] = `group -name ($BrName + "_" + $E + "_Cage_GrpN_" + $E)`;
	
	// Connect Roller Bearing Main Groups to Inner and Outer Race Rotations.
		connectAttr -f ($BrGroup[5] + ".ry") ($BrGroup[1] + ".ry");
		connectAttr -f ($BrGroup[6] + ".ry") ($BrGroup[2] + ".ry");
		
	if ((`optionMenu -q -sl DVY_RollerType` == 4 ) || (`optionMenu -q -sl DVY_RollerType` == 6 ))
		{
			connectAttr -f ($BrGroup[6] + ".ry") ($BrGroup[3] + ".ry");
		}
		
		
	// Lock Off all unused Attributes.	
		for ($each in $BrGroup)
			{
				for ($Attr in $AttrA)
					{
						setAttr -l 1 -k 0 ($each + $Attr);
					}
			}
	if (`optionMenu -q -sl DVY_RollerType` != 3 )
		{
			setAttr -l 1 -k 0 ($BrGroup[7] + ".ry");
		}
		
			setAttr -l 1 -k 0 ($Group[4] + ".ry");
		
	if ((`optionMenu -q -sl DVY_RollerType` == 5 ) || (`optionMenu -q -sl DVY_RollerType` == 6 ))
		{	
			select -r $BrGroup[10];
			delete;
		}

			
		for ($each in $AttrB)
			{
				setAttr -l 0 -k 1 ($BrGroup[0] + $each);
			}
			
			
			select -r  ($BrName + "_" + $E + "_Roller_Bearings_GrpN_*");
			$Rollers = `ls -tr -sl`;
//			print $Rollers;
			
			for ($each in $Rollers)
				{
				 for ($Attr in $AttrA)
					{
						setAttr -l 1 -k 0 ($each + $Attr);
					}
				}
//				print $BrGroup;

		if (`optionMenu -q -sl DVY_RollerType` == 2 )
			{ 
					setAttr -l 0 -k 1 ($BrGroup[5] + ".rx");
					transformLimits -rx -10 10 -erx 1 1 ($BrGroup[5] + ".rx");
	
					setAttr -l 0 -k 1 ($BrGroup[5] + ".rz");
					transformLimits -rz -10 10 -erz 1 1 ($BrGroup[5] + ".rz");
				
					setAttr -l 0 -k 1 ($BrGroup[6] + ".rx");
					transformLimits -rx -10 10 -erx 1 1 ($BrGroup[6] + ".rx");
	
					setAttr -l 0 -k 1 ($BrGroup[6] + ".rz");
					transformLimits -rz -10 10 -erz 1 1 ($BrGroup[6] + ".rz");
			
			}

				
	// Set Global Scale to size Bearing to correct dimensions. 	
		for ($each in $AttrN)
			{ setAttr -l 0 -k 0 ($BrGroup[0] + $each);}
				
				scale $DVYUnit $DVYUnit $DVYUnit $BrGroup[0];
	
		for ($each in $AttrN)
			{ setAttr -l 1 -k 0 ($BrGroup[0] + $each);}
			setAttr ($BrGroup[0] + ".displayHandle") 1;

			select -r $BrGroup[0];
			delete -ch;
		
	print ("Roller Bearing " + $BrName + "_" + $E + " has been built and rigged for correct rotations. © Davvey..\n");
	
}	// End of DVY_RollerBearingBuild procedur