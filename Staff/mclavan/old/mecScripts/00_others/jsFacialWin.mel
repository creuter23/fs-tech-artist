//------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------//
//	SCRIPT:	jsFacialWin.mel
//	VERSION: 0.4
//	AUTHOR:	Judd Simantov
//			judd@cgmuscle.com
//	WEBSITE:	www.cgmuscle.com
//	DATE:		June 28, 2004
//	
//
//	DESCRIPTION:	This script can be used to create and setup controls for facial expressions that 
//			are setup the "Jason Osipa" way.
//
//------------------------------------------------------------------------------------------------------------//	
//------------------------------------------------------------------------------------------------------------//


//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsFacialWin
//	
//		This is the main procedure for the GUI jsFacialGUI 
//------------------------------------------------------------------------------------------------------------//

global proc jsFacialWin()
{

	//check what os
	string $os = `about -os`; 
	
	//window name
	string $winName = "jsFacialGUI";
	
	//check if window exist
	//if it does delete it
	if (`window -ex $winName`==true)
		deleteUI $winName; 
	//creates window
	window -t "jsFacialGUI" -wh 450 430 $winName;
	
	
	//formLayout for GUI
	formLayout -bgc .8 .8 .8 mainFormLayout;
	
	
	//textField for control name
	string $textField_01 = `textField -bgc .8 .8 .8 -tx "ctrlName" -w 75 textField_01`;
	
	//checkBox to choose whether or not it should create text
	string $textCheckBox_01 = `checkBox  -bgc .8 .8 .8 -v 1 -l "Create Text" textCheckBox_01`;
	
	//checkBox to choose whether or not it should create text
	string $typeCheckBox_01 = `checkBox  -bgc .8 .8 .8 -v 0 -cc "jsToggleTypeF" -l "Type (F)" typeCheckBox_01`;
	
	
	button -w 77 -h 30 -bgc .59  .798 .9 -c jsBlendsWin -l "Blends:" popupButton_01;
	
	
	
	
	
	
	//checkBox to choose between standard D or 50/50 D
	string $fiftyCheckBox_01 = `checkBox  -bgc .8 .8 .8 -v 0 -cc "jsToggleFifty" -l "(50/50)" fiftyCheckBox_01`;
	
	
	//texfield for control active control
	string $textField_02 = `textField -tx "activeCtrl" -cc "jsCheckControlType" -ec "jsCheckControlType" -w 75 textField_02`;
	string $activeText_01 = `text -l "Active Control" -w 80 -bgc .8 .8 .8 -fn boldLabelFont activeText_01`;
	
	
	
	
//------------------------------------------------------------------------------------------------------------//
	//creates all the necessary buttons for the control
	string $buttonPic_a01;
	if ($os == "nt")
		$buttonPic_a01 = `button  -en -0 -w 30 -h 120  -l "" -bgc 1 1 1 buttonPic_a01`;
	
	string $iconTxtBut_aT = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlVertical top" -l "" iconTxtBut_aT`;
	string $iconTxtBut_aB = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlVertical bottom" -l "" iconTxtBut_aB`;
	string $buttonPicDisabled_a01 = `button  -c "jsCreateTypeAControl" -en 1 -w 20 -h 20 -l "" -bgc .3 .3 .3 buttonPicDisabled_a01`;
	if ($os == "linux")
		$buttonPic_a01 = `button  -en -0 -w 30 -h 120  -l "" -bgc 1 1 1 buttonPic_a01`;
	string $txtType_a01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l "(A)" txtType_a01`;
	
//------------------------------------------------------------------------------------------------------------//
	
	//creates all the necessary buttons for the control
	string $buttonPic_b01;
	if ($os == "nt")
		$buttonPic_b01 = `button  -en 0 -w 120 -h 120 -l "" -bgc 1 1 1 buttonPic_b01`;
	string $iconTxtBut_bTL = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners topLeft" -l "" iconTxtBut_bTL`;
	string $iconTxtBut_bBL = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners bottomLeft" -l "" iconTxtBut_bBL`;
	string $iconTxtBut_bTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners topRight" -l "" iconTxtBut_bTR`;
	string $iconTxtBut_bBR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners bottomRight" -l "" iconTxtBut_bBR`;
	string $iconTxtBut_bTM = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlVertical top" -l "" iconTxtBut_bTM`;
	string $iconTxtBut_bLM = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal left" -l "" iconTxtBut_bLM`;
	string $iconTxtBut_bRM = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal right" -l "" iconTxtBut_bRM`;
	string $iconTxtBut_bBM = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlVertical bottom" -l "" iconTxtBut_bBM`;
	string $buttonPicDisabled_b01 = `button  -c "jsCreateTypeCControl" -en 1 -w 20 -h 20 -l "" -bgc .3 .3 .3 buttonPicDisabled_b01`;
	if ($os == "linux")
		$buttonPic_b01 = `button  -en 0 -w 120 -h 120 -l "" -bgc 1 1 1 buttonPic_b01`;
	string $txtType_b01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l "(C)" txtType_b01`;
	
//------------------------------------------------------------------------------------------------------------//

	//creates all the necessary buttons for the control	
	string $buttonPic_c01;
	if ($os == "nt")
		$buttonPic_c01 = `button -en 0  -w 120 -h 30  -l "" -bgc 1 1 1 buttonPic_c01`;
	string $iconTxtBut_aL = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal left" -l "" iconTxtBut_aL`;
	string $iconTxtBut_aR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal right" -l "" iconTxtBut_aR`;
	string $buttonPicDisabled_c01 = `button  -c "jsCreateTypeBControl" -en 1 -w 20 -h 20 -l "" -bgc .3 .3 .3 buttonPicDisabled_c01`;
	if ($os == "linux")
		$buttonPic_c01 = `button -en 0  -w 120 -h 30  -l "" -bgc 1 1 1 buttonPic_c01`;
	string $txtType_c01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l "(B)" txtType_c01`;
	
//------------------------------------------------------------------------------------------------------------//
	
	//creates all the necessary buttons for the control	
	string $buttonPic_d01;
	if ($os == "nt")
		$buttonPic_d01 = `button -en 0 -w 120 -h 60  -l "" -bgc 1 1 1 buttonPic_d01`;
	string $iconTxtBut_dTL = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners topLeft" -l "" iconTxtBut_dTL`;
	string $iconTxtBut_dTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners topRight" -l "" iconTxtBut_dTR`;
	string $iconTxtBut_dTM = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlVertical top" -l "" iconTxtBut_dTM`;
	string $iconTxtBut_dR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal right" -l "" iconTxtBut_dR`;
	string $iconTxtBut_dL = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal left" -l "" iconTxtBut_dL`;
	string $buttonPicDisabled_d01 = `button  -c "jsCreateTypeDControl" -en 1 -w 20 -h 20 -l "" -bgc .3 .3 .3 buttonPicDisabled_d01`;
	if ($os == "linux")
		$buttonPic_d01 = `button -en 0 -w 120 -h 60  -l "" -bgc 1 1 1 buttonPic_d01`;
	string $txtType_d01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l "(D)" txtType_d01`;
	
//------------------------------------------------------------------------------------------------------------//
	
	//creates all the necessary buttons for the control
	string $buttonPic_e01;
	if ($os == "nt")
		$buttonPic_e01 = `button -en 0  -w 60 -h 60  -l "" -bgc 1 1 1 buttonPic_e01`;
	string $iconTxtBut_eTR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlCorners topRight" -l "" iconTxtBut_eTR`;
	string $iconTxtBut_eT = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlVertical top" -l "" iconTxtBut_eT`;
	string $iconTxtBut_eR = `button -bgc .59  .798 .9 -w 15 -h 15 -c "jsConnectControlHorizontal right" -l "" iconTxtBut_eR`;
	string $buttonPicDisabled_e01 = `button  -c "jsCreateTypeEControl" -en 1 -w 20 -h 20 -l "" -bgc .3 .3 .3 buttonPicDisabled_e01`;
	if ($os == "linux")
		$buttonPic_e01 = `button -en 0  -w 60 -h 60  -l "" -bgc 1 1 1 buttonPic_e01`;
	string $txtType_e01 = `text -bgc .8 .8 .8 -fn boldLabelFont -l "(E)" txtType_e01`;
	
//------------------------------------------------------------------------------------------------------------//
	
	//creates all the necessary buttons for the GUI
	string $addBlendButton = `button -bgc .59  .798 .9 -w 100 -h 30 -c "jsAddBlend" -l "Add Selected" addBlendButton`;
	string $updateButton = `button -bgc .59  .798 .9 -w 50 -h 20-c "jsUpdate" -l "Update" updateButton`;
	string $clearBlendButton = `button -bgc .59  .798 .9 -w 70 -h 30  -c "textScrollList -e -ra txtScrollList_01" -l "Clear All" clearBlendButton`;
	string $clearSelectedBlendButton = `button -bgc .59  .798 .9 -w 100 -h 30  -c "jsRemoveSelectedBlend" -l "Clear Selected" clearSelectedBlendButton`;
	
	string $txtScrollList_01 = `textScrollList -h 300 -w 180 -ams 1 -sc "jsSelectBlend" txtScrollList_01`;
	string $txtLine_01 = `text -bgc .8 .8 .8 -w 50 -fn boldLabelFont -l "Blends: " txtLine_01`;
	
	
	

//------------------------------------------------------------------------------------------------------------//
	//edit the formLayout to poistion controls 
	formLayout -edit
	
		-af 	$textCheckBox_01 "top" 200
		
		-af	$iconTxtBut_aT	"top"  33 
		-af	$iconTxtBut_aT	"left" 32
		
		-af	$iconTxtBut_aB	"top"  124
		-af	$iconTxtBut_aB	"left" 32
		
		-af	$buttonPic_a01 	"top"	25
		-af	$buttonPic_a01 	"left"	25
		
		-af	$buttonPicDisabled_a01 	"top"	76
		-af	$buttonPicDisabled_a01 	"left"	30
		
		-af	$txtType_a01	"top"	126
		-af	$txtType_a01	"left"	2
		
//------------------------------------------------------------------------------------------------------------//
		
		-af	$iconTxtBut_bTL	"top"  33
		-af	$iconTxtBut_bTL	"left" 100
		-af	$iconTxtBut_bBL	"top"  124
		-af	$iconTxtBut_bBL	"left" 100
		-af	$iconTxtBut_bTR	"top"  33
		-af	$iconTxtBut_bTR	"left" 194
		-af	$iconTxtBut_bBR	"top"  124
		-af	$iconTxtBut_bBR	"left" 194
		
		-af	$iconTxtBut_bTM	"top"  33
		-af	$iconTxtBut_bTM	"left" 147
		-af	$iconTxtBut_bLM	"top"  78
		-af	$iconTxtBut_bLM	"left" 100
		-af	$iconTxtBut_bRM	"top"  78
		-af	$iconTxtBut_bRM	"left" 194
		-af	$iconTxtBut_bBM	"top"  124
		-af	$iconTxtBut_bBM	"left" 147
		
		-af	$buttonPicDisabled_b01 	"top"	76
		-af	$buttonPicDisabled_b01 	"left"	144
		
		-af	$buttonPic_b01 	"top"	25
		-af	$buttonPic_b01 	"left"	95
		
		-af	$txtType_b01	"top"	126
		-af	$txtType_b01	"left"	73
		
//------------------------------------------------------------------------------------------------------------//
		
		-af	$iconTxtBut_aL	"top"  188
		-af	$iconTxtBut_aL	"left" 100
		-af	$iconTxtBut_aR	"top"  188
		-af	$iconTxtBut_aR	"left" 196
		-af	$buttonPic_c01 	"top"  180
		-af	$buttonPic_c01 	"left" 96
		
		-af	$buttonPicDisabled_c01 	"top"	185
		-af	$buttonPicDisabled_c01 	"left"	144
		
		-af	$txtType_c01	"top"	190
		-af	$txtType_c01	"left"	73
		
//------------------------------------------------------------------------------------------------------------//
		
		-af	$iconTxtBut_dTL	"top"  270
		-af	$iconTxtBut_dTL	"left" 100
		
		-af	$iconTxtBut_dTR	"top"  270
		-af	$iconTxtBut_dTR	"left" 194
		
		-af	$iconTxtBut_dTM	"top"  270
		-af	$iconTxtBut_dTM	"left" 147
		
		-af	$iconTxtBut_dR	"top"  305
		-af	$iconTxtBut_dR	"left" 194
		
		-af	$iconTxtBut_dL	"top"  305
		-af	$iconTxtBut_dL	"left" 100
		
		-af	$buttonPic_d01 	"top"	265
		-af	$buttonPic_d01 	"left"	95
		
		-af	$buttonPicDisabled_d01 	"top"	301
		-af	$buttonPicDisabled_d01 	"left"	144
		
		-af	$txtType_d01	"top"	247
		-af	$txtType_d01	"left"	95
		
//------------------------------------------------------------------------------------------------------------//
		
		-af	$iconTxtBut_eTR	"top"  270
		-af	$iconTxtBut_eTR	"left" 64
		
		-af	$iconTxtBut_eT	"top"  270
		-af	$iconTxtBut_eT	"left" 29
		
		-af	$iconTxtBut_eR	"top"  305
		-af	$iconTxtBut_eR	"left" 64
		
		-af	$buttonPic_e01 	"top"	265
		-af	$buttonPic_e01 	"left"	25
		
		-af	$buttonPicDisabled_e01 	"top"	301
		-af	$buttonPicDisabled_e01 	"left"	29
		
		
		-af	$txtType_e01	"top"	247
		-af	$txtType_e01	"left"	25
		
//------------------------------------------------------------------------------------------------------------//
		
		-af     $txtLine_01     "top"    5
		-af     $txtLine_01     "left"   250
		
		-af	$txtScrollList_01 "top"	 25
		-af	$txtScrollList_01 "left" 250
		
		-af	$addBlendButton "left"	 250
		-ac	$addBlendButton "top"	 4 $txtScrollList_01
		
		-af	popupButton_01 "left"	 353
		-ac	popupButton_01 "top"	 4 $txtScrollList_01
		
		
		
		-af	$clearBlendButton "left"	 250
		-ac	$clearBlendButton "top"	 2 $addBlendButton
		
		-ac	$clearSelectedBlendButton "left" 2 $clearBlendButton
		-ac	$clearSelectedBlendButton "top"	 2 $addBlendButton
		
		-af	$textCheckBox_01 "top"	 346
		-af	$textCheckBox_01 "left"	 10
		
		-af	$textField_01 "top"	 340
		-ac	$textField_01 "left"	 5 $textCheckBox_01
		
		-af	$textField_02 "top"	 365
		-ac	$textField_02 "left"	 5 $textCheckBox_01
		
		-af	$typeCheckBox_01 "top"	 190
		-af	$typeCheckBox_01 "left"	 2
		
		-af	$fiftyCheckBox_01 "top"	 247
		-af	$fiftyCheckBox_01 "left" 160
		
		-af	$activeText_01 "top"	 370
		-af	$activeText_01 "left"	 11
		
		-af 	$updateButton "left"	180
		-af 	$updateButton "top"	366

		
//------------------------------------------------------------------------------------------------------------//
	
	
	mainFormLayout;
	
	//show the window
	showWindow $winName;

}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsBlendsWin
//	
//		This procedure will add items to the popup list
//------------------------------------------------------------------------------------------------------------//

global proc jsBlendsWin()
{
	//windows name
	string $windowName = "blendsWin";
	
	//check if window exists
	if (`window -ex $windowName`==true)
		deleteUI $windowName; 
	//create window
	window -w 100 -h 200 $windowName;
	
	//formlayout
	formLayout blendFL;
	
	//create textScrollList
	textScrollList -w 100 -h 160 -dcc jsSelectBlends blendsTxtScrollList;
	
	//position scrollList in formLayout
	formLayout -e 
		
		-af blendsTxtScrollList "left" 1
		-af blendsTxtScrollList "right" 1
		-af blendsTxtScrollList "top" 1
		-af blendsTxtScrollList "bottom" 1
	blendFL;
		

	//list all the blends in the scene
	string $blends[] = `ls -typ blendShape`;
	string $blend;
	
	//for each blend, add it to the scrollList
	for ($blend in $blends)
	{	
		textScrollList -e -a $blend blendsTxtScrollList;
			
	}
	
	//show the window
	showWindow $windowName;
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsSelectBlends
//	
//		This procedure will select the blends from the list
//------------------------------------------------------------------------------------------------------------//


global proc jsSelectBlends()
{
	//query the selected name quickly
	string $name[] = `textScrollList -q -si blendsTxtScrollList`;
	//select the blend
	select $name[0];
	
	//close the window
	deleteUI blendsWin;
}
	

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsRemoveSelectedBlend
//	
//		This procedure will remove the selected name in the textScrollList
//------------------------------------------------------------------------------------------------------------//

global proc jsRemoveSelectedBlend()
{
	//get the name of the selected item
	string $selectedName[] = `textScrollList -q -si txtScrollList_01`;
	string $selName;
	
	for ($selName in $selectedName)
	{
	
		//remove the selected item
		textScrollList -e -ri $selName txtScrollList_01;
	
		//print that it was succesful
		print ($selName+" succesfully removed from list\n");
	
	}
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsAddBlend
//	
//		This procedure will add all the attribute of the selected object to the textScrollList
//------------------------------------------------------------------------------------------------------------//

global proc jsAddBlend()
{
	//add selected objects to $selected[]
	string $selected[] = `ls -sl`;
	//variable for loop
	string $sel;
	
	//loop through all selected object
	for ($sel in $selected)
	{
		//list atributes of selected objects
		string $blendAttrs[]=`listAttr -m -s -r -c -k -v $sel`;
		string $attr;
		
		//loop through all attributes and add them to the textScrollList
		for ($attr in $blendAttrs)
		{
			string $match = `match "envelope" $attr`;
			if ($match != "envelope")
			textScrollList -e -a ($sel+"."+$attr) txtScrollList_01;
		}
		
		
	}
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateTypeAControl
//	
//		This procedure will create the control typeA 
//------------------------------------------------------------------------------------------------------------//

global proc jsCreateTypeAControl()
{
	//check operating system
	string $os = `about -os`;
	//get name of text control
	string $name =`textField -q -tx textField_01`; 
	
	//check if object by that name already exists
	if (!`objExists ($name+"Grp")`)
	{
		//check if it is a type F or A
		int $typef = `checkBox -q -v typeCheckBox_01`;
		
		//create empty group node
		group -em -n ($name+"Grp");
		//add type attribute
		addAttr -ln "type" -dt "string" ($name+"Grp");
		
		//check if object is an F type
		//if it is create control for f
		if ($typef)
		{
			setAttr -type "string" ($name+"Grp.type") "Fa"; 
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 1.05 -sl2 .3  -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 1.1 -sl2 .4  -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
			
			circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
			scale 1 .25 1 ($name+"CircleCtrl");
			
		}
			
		//if it isn't an F type create control for A
		else if (!$typef)
		{
			
			setAttr -type "string" ($name+"Grp.type") "A"; 
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 2 -sl2 .3  -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 2.1 -sl2 .4  -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
			
			circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
			scale 1 .5 1 ($name+"CircleCtrl");
			
		}
		
		
		//check if text should be created
		if (`checkBox -q -v textCheckBox_01`)
		{
			//create text for linux
			if ($os == "linux")
				textCurves -n ($name+"Text") -ch 0 -f "Courier" -t ($name);
			//create text for NT
			else if ($os == "nt")
			{
				//textCurves -n ($name+"Text")-ch 0 -f "Times New Roman-Regular" -t "Maya";

				textCurves -n ($name+"Text") -ch 0 -f "Arial|h-4|w400|c0" -t ($name);
				//textCurves -n ($name+"Text") -ch 0 -f "Times New Roman-Regular" -t ($name);
				string $relatives[] = `listRelatives`;
				string $con;
				string $connections[] = `listConnections $relatives[0]`;
				for ($con in $connections)
				{
					string $match = `match "^makeText" $con`;
					if ($match == "makeText")
						delete $con;
				}
				
			}
	
			xform -cp ($name+"TextShape");
			pointConstraint -n ($name+"TempConst") ($name+"Grp") ($name+"TextShape");
			delete ($name+"TempConst");
			makeIdentity -apply true -t 1 -r 1 -s 1 ($name+"TextShape");
			scale .4 .4 .4 ($name+"TextShape");
			move 0 1.3 0 ($name+"TextShape"); 
			setAttr ($name+"TextShape.template") 1;
			parent ($name+"TextShape") ($name+"Grp");
			connectAttr -f ($name+"CircleCtrl.v") ($name+"TextShape.v");
		}
		
		//set the squares to be templated
		setAttr ($name+"InnerSquare.template") 1;
		setAttr ($name+"OuterSquare.template") 1;
		
		
		
		
		//set the limits on the circle control
		transformLimits -tz  0 0 -etz 1 1 ($name+"CircleCtrl");
		transformLimits -tx  0 0 -etx 1 1 ($name+"CircleCtrl");
		transformLimits -ty -1 1 -ety 1 1 ($name+"CircleCtrl");
		
		//add message name attribute
		addAttr -ln "name" -dt "string" ($name+"CircleCtrl");
		setAttr -type "string" ($name+"CircleCtrl.name") $name; 
		
		//parent everything under the main group node
		parent ($name+"CircleCtrl") ($name+"InnerSquare") ($name+"OuterSquare") ($name+"Grp");
		
		//if control type is F make certain changes to control
		if ($typef)
		{
			scale 1 2 1 ($name+"Grp");
			
			move 0 1 0 ($name+"InnerSquare");
			move 0 1 0 ($name+"OuterSquare");
			
			if (`checkBox -q -v textCheckBox_01`)
			{
				scale .4 .2 .4 ($name+"TextShape");
				xform -ws -t 0 2.35 0 ($name+"TextShape");
			}
			
			transformLimits -ty 0 1 -ety 1 1 ($name+"CircleCtrl");
			
		}
		
		//lock attributes on control that are not needed
		jsLockHideAttr ($name+"CircleCtrl");
		
		//connect visibility of circle control to range controls
		connectAttr -f ($name+"CircleCtrl.v") ($name+"InnerSquare.v");
		connectAttr -f ($name+"CircleCtrl.v") ($name+"OuterSquare.v");
		
		//change active text field to the control that was just created's name 
		textField -e -tx ($name) textField_02;
		
		//set default manipulator tool
		select -r ($name+"CircleCtrl");
		setDefaultManip 1;
		
		//select the group for translation
		select -r ($name+"Grp");
		
		//check the control type and disable buttons that are not active
		jsCheckControlType;
	
	}
	//if the object already exists print the error
	else if (`objExists ($name+"Grp")`)
	{
		print "Control already exists. Please change control name!\n";
	}
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateTypeBControl
//	
//		This procedure will create the control typeB 
//------------------------------------------------------------------------------------------------------------//

global proc jsCreateTypeBControl()
{
	//check operating system
	string $os = `about -os`;
	
	//get name of text control
	string $name =`textField -q -tx textField_01`; 
	
	//check if object by that name already exists
	if (!`objExists ($name+"Grp")`)
	{
		
		//check if it is a type F or A
		int $typef = `checkBox -q -v typeCheckBox_01`;
		//create empty group node
		group -em -n ($name+"Grp");
		//add type attribute
		addAttr -ln "type" -dt "string" ($name+"Grp");
		
		//check if object is an F type
		//if it is create control for f
		if ($typef)
		{
			setAttr -type "string" ($name+"Grp.type") "Fb"; 
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 .3 -sl2 1.05  -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 .4 -sl2 1.1  -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
			
			circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
			scale .25 1 1 ($name+"CircleCtrl");
			
		}
			
		//if it isn't an F type create control for A
		else if (!$typef)
		{
			
			setAttr -type "string" ($name+"Grp.type") "B"; 
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 .3 -sl2 2  -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
			nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 .4 -sl2 2.1  -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
			circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
			scale .5 1 1 ($name+"CircleCtrl");
			
		
		}
		
		//check if text should be created
		if (`checkBox -q -v textCheckBox_01`)
		{
			//create text for linux
			if ($os == "linux")
				textCurves -n ($name+"Text") -ch 0 -f "Courier" -t ($name);
			//create text for NT
			else if ($os == "nt")
			{
				textCurves -n ($name+"Text") -ch 0 -f "Arial|h-4|w400|c0" -t ($name);
				string $relatives[] = `listRelatives`;
				string $con;
				string $connections[] = `listConnections $relatives[0]`;
				for ($con in $connections)
				{
					string $match = `match "^makeText" $con`;
					if ($match == "makeText")
						delete $con;
				}
				
			}
			xform -cp ($name+"TextShape");
			pointConstraint -n ($name+"TempConst") ($name+"Grp") ($name+"TextShape");
			delete ($name+"TempConst");
			makeIdentity -apply true -t 1 -r 1 -s 1 ($name+"TextShape");
			scale .4 .4 .4 ($name+"TextShape");
			move 0 .45 0 ($name+"TextShape"); 
			setAttr ($name+"TextShape.template") 1;
			parent ($name+"TextShape") ($name+"Grp");
			connectAttr -f ($name+"CircleCtrl.v") ($name+"TextShape.v");
		}
		
		//set the squares to be templated
		setAttr ($name+"InnerSquare.template") 1;
		setAttr ($name+"OuterSquare.template") 1;
		
		
		
		
		//set the limits on the circle control
		transformLimits -tz  0 0 -etz 1 1 ($name+"CircleCtrl");
		transformLimits -tx -1 1 -etx 1 1 ($name+"CircleCtrl");
		transformLimits -ty  0 0 -ety 1 1 ($name+"CircleCtrl");
		
		
		//add message name attribute
		addAttr -ln "name" -dt "string" ($name+"CircleCtrl");
		setAttr -type "string" ($name+"CircleCtrl.name") $name; 
		
		//parent everything under the main group node
		parent ($name+"CircleCtrl") ($name+"InnerSquare") ($name+"OuterSquare") ($name+"Grp");
		
		//if control type is F make certain changes to control
		if ($typef)
		{
			scale 2 1 1 ($name+"Grp");
			
			move 1 0 0 ($name+"InnerSquare");
			move 1 0 0 ($name+"OuterSquare");
			
			if (`checkBox -q -v textCheckBox_01`)
			{
				scale .2 .4 .4 ($name+"TextShape");
				
				move -r 1 0 0 ($name+"TextShape");
			}
				
			transformLimits -tx 0 1 -etx 1 1 ($name+"CircleCtrl");
			
		}
		
		//lock attributes on control that are not needed
		jsLockHideAttr ($name+"CircleCtrl");
		
		//connect visibility of circle control to range controls
		connectAttr -f ($name+"CircleCtrl.v") ($name+"InnerSquare.v");
		connectAttr -f ($name+"CircleCtrl.v") ($name+"OuterSquare.v");
		
		//change active text field to the control that was just created's name 
		textField -e -tx ($name) textField_02;
		
		//set default manipulator tool
		select -r ($name+"CircleCtrl");
		setDefaultManip 1;
		
		//select the group for translation
		select -r ($name+"Grp");
		
		//check the control type and disable buttons that are not active
		jsCheckControlType;
	}
	
	//if the object already exists print the error
	else if (`objExists ($name+"Grp")`)
	{
		print "Control already exists. Please change control name!\n";
	}
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateTypeCControl
//	
//		This procedure will create the control typeC
//------------------------------------------------------------------------------------------------------------//

global proc jsCreateTypeCControl()
{
	//check operating system
	string $os = `about -os`;
	
	//get name of text control
	string $name =`textField -q -tx textField_01`;
	
	//check if object by that name already exists
	if (!`objExists ($name+"Grp")`)
	{
		
		//create empty group node
		group -em -n ($name+"Grp");
		
		//add type attribute
		addAttr -ln "type" -dt "string" ($name+"Grp");
		
		//create control
		setAttr -type "string" ($name+"Grp.type") "C"; 
		nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 2 -sl2 2 -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
		nurbsSquare -c 0 0 0 -nr 0 0 1 -sl1 2.1 -sl2 2.1 -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
		
		circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
		scale 1 1 1 ($name+"CircleCtrl");
		
		
		//check if text should be created
		if (`checkBox -q -v textCheckBox_01`)
		{
			//create text for linux
			if ($os == "linux")
				textCurves -n ($name+"Text") -ch 0 -f "Courier" -t ($name);
			//create text for NT
			else if ($os == "nt")
			{
				textCurves -n ($name+"Text") -ch 0 -f "Arial|h-4|w400|c0" -t ($name);
				string $relatives[] = `listRelatives`;
				string $con;
				string $connections[] = `listConnections $relatives[0]`;
				for ($con in $connections)
				{
					string $match = `match "^makeText" $con`;
					if ($match == "makeText")
						delete $con;
				}
				
			}
			xform -cp ($name+"TextShape");
			pointConstraint -n ($name+"TempConst") ($name+"Grp") ($name+"TextShape");
			delete ($name+"TempConst");
			makeIdentity -apply true -t 1 -r 1 -s 1 ($name+"TextShape");
			scale .4 .4 .4 ($name+"TextShape");
			move 0 1.3 0 ($name+"TextShape"); 
			setAttr ($name+"TextShape.template") 1;
			parent ($name+"TextShape") ($name+"Grp");
			connectAttr -f ($name+"CircleCtrl.v") ($name+"TextShape.v");
		}
		//set the squares to be templated
		setAttr ($name+"InnerSquare.template") 1;
		setAttr ($name+"OuterSquare.template") 1;
		
		
		
		
		//set the limits on the circle control
		transformLimits -tz -0 0 -etz 1 1 ($name+"CircleCtrl");
		transformLimits -tx -1 1 -etx 1 1 ($name+"CircleCtrl");
		transformLimits -ty -1 1 -ety 1 1 ($name+"CircleCtrl");
		
		//add message name attribute
		addAttr -ln "name" -dt "string" ($name+"CircleCtrl");
		setAttr -type "string" ($name+"CircleCtrl.name") $name; 
		
		//parent everything under the main group node
		parent ($name+"CircleCtrl") ($name+"InnerSquare") ($name+"OuterSquare") ($name+"Grp");
		
		//lock attributes on control that are not needed
		jsLockHideAttr ($name+"CircleCtrl");
		
		//connect visibility of circle control to range controls
		connectAttr -f ($name+"CircleCtrl.v") ($name+"InnerSquare.v");
		connectAttr -f ($name+"CircleCtrl.v") ($name+"OuterSquare.v");
		
		//change active text field to the control that was just created's name 
		textField -e -tx ($name) textField_02;
		
		//set default manipulator tool
		select -r ($name+"CircleCtrl");
		setDefaultManip 1;
		
		//select the group for translation
		select -r ($name+"Grp");
		
		//check the control type and disable buttons that are not active
		jsCheckControlType;
	}
	//if the object already exists print the error
	else if (`objExists ($name+"Grp")`)
	{
		print "Control already exists. Please change control name!\n";
	}
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateTypeDControl
//	
//		This procedure will create the control typeD 
//------------------------------------------------------------------------------------------------------------//

global proc jsCreateTypeDControl()
{
	//check operating system
	string $os = `about -os`;
	
	//get name of text control
	string $name =`textField -q -tx textField_01`; 
	
	//check if object by that name already exists
	if (!`objExists ($name+"Grp")`)
	{
		
		//check if it is a type fifty or not
		int $fifty = `checkBox -q -v fiftyCheckBox_01`;
		
		//create empty group node
		group -em -n ($name+"Grp");
		
		//add type attribute
		addAttr -ln "type" -dt "string" ($name+"Grp");
		
		//check if object is a fifty type
		//if it is create control for fifty
		if ($fifty)
		{
			setAttr -type "string" ($name+"Grp.type") "50"; 
		}
		
		//if it isn't a fifty type create control for D
		else if (!$fifty)
		{
			setAttr -type "string" ($name+"Grp.type") "D"; 
		}
		
		nurbsSquare -c 0 .5 0 -nr 0 0 1 -sl1 1 -sl2 2 -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
		nurbsSquare -c 0 .5 0 -nr 0 0 1 -sl1 1.1 -sl2 2.1 -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
			
		circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
		scale 1 1 1 ($name+"CircleCtrl");
		
		
		//check if text should be created
		if (`checkBox -q -v textCheckBox_01`)
		{
			//create text for linux
			if ($os == "linux")
				textCurves -n ($name+"Text") -ch 0 -f "Courier" -t ($name);
			//create text for NT
			else if ($os == "nt")
			{
				textCurves -n ($name+"Text") -ch 0 -f "Arial|h-4|w400|c0" -t ($name);
				string $relatives[] = `listRelatives`;
				string $con;
				string $connections[] = `listConnections $relatives[0]`;
				for ($con in $connections)
				{
					string $match = `match "^makeText" $con`;
					if ($match == "makeText")
						delete $con;
				}
				
			}
			xform -cp ($name+"TextShape");
			pointConstraint -n ($name+"TempConst") ($name+"Grp") ($name+"TextShape");
			delete ($name+"TempConst");
			makeIdentity -apply true -t 1 -r 1 -s 1 ($name+"TextShape");
			scale .4 .4 .4 ($name+"TextShape");
			move 0 1.3 0 ($name+"TextShape"); 
			setAttr ($name+"TextShape.template") 1;
			parent ($name+"TextShape") ($name+"Grp");
			connectAttr -f ($name+"CircleCtrl.v") ($name+"TextShape.v");
		}
		
		//set the squares to be templated
		setAttr ($name+"InnerSquare.template") 1;
		setAttr ($name+"OuterSquare.template") 1;
		
		
		
		
		//set the limits on the circle control
		transformLimits -tz -0 0 -etz 1 1 ($name+"CircleCtrl");
		transformLimits -tx -1 1 -etx 1 1 ($name+"CircleCtrl");
		transformLimits -ty  0 1 -ety 1 1 ($name+"CircleCtrl");
		
		//add message name attribute
		addAttr -ln "name" -dt "string" ($name+"CircleCtrl");
		setAttr -type "string" ($name+"CircleCtrl.name") $name; 
		
		//parent everything under the main group node
		parent ($name+"CircleCtrl") ($name+"InnerSquare") ($name+"OuterSquare") ($name+"Grp");
		
		
		//lock attributes on control that are not needed
		jsLockHideAttr ($name+"CircleCtrl");
		
		//connect visibility of circle control to range controls
		connectAttr -f ($name+"CircleCtrl.v") ($name+"InnerSquare.v");
		connectAttr -f ($name+"CircleCtrl.v") ($name+"OuterSquare.v");
		
		//change active text field to the control that was just created's name 
		textField -e -tx ($name) textField_02;
		
		//set default manipulator tool
		select -r ($name+"CircleCtrl");
		setDefaultManip 1;
		
		//select the group for translation
		select -r ($name+"Grp");
		
		//check the control type and disable buttons that are not active
		jsCheckControlType;
	}
	
	//if the object already exists print the error
	else if (`objExists ($name+"Grp")`)
	{
		print "Control already exists. Please change control name!\n";
	}
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCreateTypeEControl
//	
//		This procedure will create the control typeE 
//------------------------------------------------------------------------------------------------------------//

global proc jsCreateTypeEControl()
{
	
	//check operating system
	string $os = `about -os`;
	
	//get name of text control
	string $name =`textField -q -tx textField_01`; 
	
	//check if object by that name already exists
	if (!`objExists ($name+"Grp")`)
	{
		//create empty group node
		group -em -n ($name+"Grp");
		//add type attribute
		addAttr -ln "type" -dt "string" ($name+"Grp");
		//set attribute type to E
		setAttr -type "string" ($name+"Grp.type") "E"; 
		nurbsSquare -c .5 .5 0 -nr 0 0 1 -sl1 1 -sl2 1 -sps 1 -d 3 -ch 0 -n ($name+"InnerSquare") ;
		nurbsSquare -c .5 .5 0 -nr 0 0 1 -sl1 1.1 -sl2 1.1 -sps 1 -d 3 -ch 0 -n ($name+"OuterSquare");
		
		circle -c 0 0 0 -nr 0 0 1 -sw 360 -r .15 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0 -n ($name+"CircleCtrl");
		scale 1 1 1 ($name+"CircleCtrl");
		
		
		//check if text should be created
		if (`checkBox -q -v textCheckBox_01`)
		{
			//create text for linux
			if ($os == "linux")
				textCurves -n ($name+"Text") -ch 0 -f "Courier" -t ($name);
			//create text for NT
			else if ($os == "nt")
			{
				textCurves -n ($name+"Text") -ch 0 -f "Arial|h-4|w400|c0" -t ($name);
				string $relatives[] = `listRelatives`;
				string $con;
				string $connections[] = `listConnections $relatives[0]`;
				for ($con in $connections)
				{
					string $match = `match "^makeText" $con`;
					if ($match == "makeText")
						delete $con;
				}
				
			}
			xform -cp ($name+"TextShape");
			pointConstraint -n ($name+"TempConst") ($name+"Grp") ($name+"TextShape");
			delete ($name+"TempConst");
			makeIdentity -apply true -t 1 -r 1 -s 1 ($name+"TextShape");
			scale .4 .4 .4 ($name+"TextShape");
			move .5 1.3 0 ($name+"TextShape"); 
			setAttr ($name+"TextShape.template") 1;
			parent ($name+"TextShape") ($name+"Grp");
			connectAttr -f ($name+"CircleCtrl.v") ($name+"TextShape.v");
		}
		
		//set the squares to be templated
		setAttr ($name+"InnerSquare.template") 1;
		setAttr ($name+"OuterSquare.template") 1;
		
		
		
		//set the limits on the circle control
		transformLimits -tz -0 0 -etz 1 1 ($name+"CircleCtrl");
		transformLimits -tx  0 1 -etx 1 1 ($name+"CircleCtrl");
		transformLimits -ty  0 1 -ety 1 1 ($name+"CircleCtrl");
		
		//add message name attribute
		addAttr -ln "name" -dt "string" ($name+"CircleCtrl");
		setAttr -type "string" ($name+"CircleCtrl.name") $name; 
		
		//parent everything under the main group node
		parent ($name+"CircleCtrl") ($name+"InnerSquare") ($name+"OuterSquare") ($name+"Grp");
		
		//lock attributes on control that are not needed
		jsLockHideAttr ($name+"CircleCtrl");
		
		//connect visibility of circle control to range controls
		connectAttr -f ($name+"CircleCtrl.v") ($name+"InnerSquare.v");
		connectAttr -f ($name+"CircleCtrl.v") ($name+"OuterSquare.v");
		
		//change active text field to the control that was just created's name 
		textField -e -tx ($name) textField_02;
		
		//set default manipulator tool
		select -r ($name+"CircleCtrl");
		setDefaultManip 1;
		
		//select the group for translation
		select -r ($name+"Grp");
		
		//check the control type and disable buttons that are not active
		jsCheckControlType;
	}
	
	//if the object already exists print the error
	else if (`objExists ($name+"Grp")`)
	{
		print "Control already exists. Please change control name!\n";
	}
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsLockHideAttr
//	
//		This procedure will hide and lock attributes that are not needed 
//------------------------------------------------------------------------------------------------------------//

global proc jsLockHideAttr(string $name)
{
	
		
	//lock translate Z
	setAttr -lock true ($name+".tz");
	setAttr -keyable false ($name+".tz");
	
	//lock rotate X
	setAttr -lock true ($name+".rx");
	setAttr -keyable false ($name+".rx");
	
	//lock rotate Y
	setAttr -lock true ($name+".ry");
	setAttr -keyable false ($name+".ry");
	
	//lock rotate Z
	setAttr -lock true ($name+".rz");
	setAttr -keyable false ($name+".rz");
	
	//lock scale X
	setAttr -lock true ($name+".sx");
	setAttr -keyable false ($name+".sx");
	
	//lock scale Y
	setAttr -lock true ($name+".sy");
	setAttr -keyable false ($name+".sy");
	
	//lock scale Z
	setAttr -lock true ($name+".sz");
	setAttr -keyable false ($name+".sz");
	
	
	//remove the comment lines if you want to also lock visibility
	//setAttr -lock true ($name+".visibility");
	//setAttr -keyable false ($name+".visibility");
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsConnectControlVertical
//	
//		This procedure will make a vertical connection between the control 
//		and the selected item. 
//------------------------------------------------------------------------------------------------------------//

global proc jsConnectControlVertical(string $position)
{
	//get the name of the control
	string $name =`textField -q -tx textField_02`; 
	
	if (`objExists ($name+"Grp")`)
	{
	
		//get the name of the selected item
		string $selectedName[] = `textScrollList -q -si txtScrollList_01`;
		string $selName;
		//loop through all the selected items
		for ($selName in $selectedName)
		{
			
			
			//check position
			if ($position == "top")
			{
				//create clamp node
				string $topClampName = `shadingNode -n ($name+"TopClamp") -asUtility clamp`;
				//set clamp max and min
				setAttr ($topClampName+".maxR") 1;
				setAttr ($topClampName+".minR") 0;
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.ty") ($topClampName+".inputR");
				connectAttr -f ($topClampName+".outputR") $selName;
				
			}
			//check position
			else if ($position == "bottom")
			{
				//create clamp node
				string $bottomClampName = `shadingNode -n ($name+"BottomClamp") -asUtility clamp`;
				//create multiply divide node
				string $bottomMultName = `shadingNode -n ($name+"BottomMultDivide") -asUtility multiplyDivide`;
				//set operation to multiply and input 2 to -1
				setAttr ($bottomMultName+".operation") 1;
				setAttr ($bottomMultName+".input2X") -1;
				
				//set clamp max and min
				setAttr ($bottomClampName+".maxR") 1;
				setAttr ($bottomClampName+".minR") 0;
			
				//connect the control to the input of the multDivide node
				connectAttr -f ($name+"CircleCtrl.ty") ($bottomMultName+".input1X");
				//connect the multDivide node into the input R of the clamp node
				connectAttr -f ($bottomMultName+".outputX") ($bottomClampName+".inputR");
				//connect the output of the clamp node into the selected attribute
				connectAttr -f ($bottomClampName+".outputR") $selName;
			}
		
		
			//print that it was succesful
			print ("connection succesfully made!\n");
		
		}
	}

	
	
	else if (!`objExists ($name+"Grp")`)
		print ("No control named "+$name+" exists. Please change active control name!\n");

}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsConnectControlHorizontal
//	
//		This procedure will make a horizontal connection between the control 
//		and the selected item. 
//------------------------------------------------------------------------------------------------------------//

global proc jsConnectControlHorizontal(string $position)
{
	//get the name of the control
	string $name =`textField -q -tx textField_02`; 
	
	if (`objExists ($name+"Grp")`)
	{
		//get the name of the selected item
		string $selectedName[] = `textScrollList -q -si txtScrollList_01`;
		string $selName;
		
		//loop through all the selected names
		for ($selName in $selectedName)
		{
			
			
			//check position
			if ($position == "right")
			{
				//create clamp node
				string $rightClampName = `shadingNode -n ($name+"RightClamp") -asUtility clamp`;
				
				//set clamp max and min
				setAttr ($rightClampName+".maxR") 1;
				setAttr ($rightClampName+".minR") 0;
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($rightClampName+".inputR");
				connectAttr -f ($rightClampName+".outputR") $selName;
				
				
			}
			//check position
			else if ($position == "left")
			{
				string $leftClampName = `shadingNode -n ($name+"LeftClamp") -asUtility clamp`;
				string $leftMultName = `shadingNode -n ($name+"LeftMultDivide") -asUtility multiplyDivide`;
				setAttr ($leftMultName+".operation") 1;
				setAttr ($leftMultName+".input2X") -1;
				
				//set clamp max and min
				setAttr ($leftClampName+".maxR") 1;
				setAttr ($leftClampName+".minR") 0;
			
				connectAttr -f ($name+"CircleCtrl.tx") ($leftMultName+".input1X");
				connectAttr -f ($leftMultName+".outputX") ($leftClampName+".inputR");
				connectAttr -f ($leftClampName+".outputR") $selName;
				
			}
		
		
			//print that it was succesful
			print ("connection succesfully made!\n");
		
		}
	}
	
	else if (!`objExists ($name+"Grp")`)
		print ("No control named "+$name+" exists. Please change active control name!\n");
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsConnectControlCorners
//	
//		This procedure will make a diagonal connection between the control 
//		and the selected item. 
//------------------------------------------------------------------------------------------------------------//

global proc jsConnectControlCorners(string $position)
{
	//get the name of the control
	string $name =`textField -q -tx textField_02`; 
	
	
	
	if (`objExists ($name+"Grp")`)
	{
		//get the name of the selected item
		string $selectedName[] = `textScrollList -q -si txtScrollList_01`;
		string $selName;
		
		//check if fifty is activated
		int $fifty = `checkBox -q -v fiftyCheckBox_01`;
		
		//loop through all the selected names
		for ($selName in $selectedName)
		{
			
			
			//check position
			if (($position == "topRight") && (!$fifty))
			{
				//create clamp node
				string $topRightXClampName = `shadingNode -n ($name+"TopRightXClamp") -asUtility clamp`;
				string $topRightYClampName = `shadingNode -n ($name+"TopRightYClamp") -asUtility clamp`;
				
				string $topRightAddName =`shadingNode -n ($name+"TopRightAdd") -asUtility addDoubleLinear`;
				
				string $topRightMultName = `shadingNode -n ($name+"TopRightMultDivide") -asUtility multiplyDivide`;
				
				//set clamp max and min
				setAttr ($topRightXClampName+".maxR") 1;
				setAttr ($topRightXClampName+".minR") 0;
				setAttr ($topRightYClampName+".maxR") 1;
				setAttr ($topRightYClampName+".minR") 0;
				setAttr ($topRightAddName+".input2") 1;
				
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($topRightAddName+".input1");
				connectAttr -f ($topRightAddName+".output") ($topRightXClampName+".inputR");
				
				connectAttr -f ($name+"CircleCtrl.ty") ($topRightYClampName+".inputR");
				
				connectAttr -f ($topRightXClampName+".outputR") ($topRightMultName+".input1X");
				connectAttr -f ($topRightYClampName+".outputR") ($topRightMultName+".input2X");
				
				connectAttr -f ($topRightMultName+".outputX") $selName;
				
				
			}
			//check position
			else if ($position == "bottomRight")
			{
				//create clamp node
				string $bottomRightXClampName = `shadingNode -n ($name+"BottomRightXClamp") -asUtility clamp`;
				string $bottomRightYClampName = `shadingNode -n ($name+"BottomRightYClamp") -asUtility clamp`;
				
				string $bottomRightAddName =`shadingNode -n ($name+"BottomRightAdd") -asUtility addDoubleLinear`;
				
				string $bottomRightMultName = `shadingNode -n ($name+"BottomRightMultDivide") -asUtility multiplyDivide`;
				string $bottomRightYMultName = `shadingNode -n ($name+"BottomRightYMultDivide") -asUtility multiplyDivide`;
				
				//set clamp max and min
				setAttr ($bottomRightXClampName+".maxR") 1;
				setAttr ($bottomRightXClampName+".minR") 0;
				setAttr ($bottomRightYClampName+".maxR") 1;
				setAttr ($bottomRightYClampName+".minR") 0;
				setAttr ($bottomRightAddName+".input2") 1;
				setAttr ($bottomRightYMultName+".input2X") -1;
				
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($bottomRightAddName+".input1");
				connectAttr -f ($bottomRightAddName+".output") ($bottomRightXClampName+".inputR");
				
				connectAttr -f ($name+"CircleCtrl.ty") ($bottomRightYMultName+".input1X");
				connectAttr -f ($bottomRightYMultName+".outputX") ($bottomRightYClampName+".inputR");
				
				connectAttr -f ($bottomRightXClampName+".outputR") ($bottomRightMultName+".input1X");
				connectAttr -f ($bottomRightYClampName+".outputR") ($bottomRightMultName+".input2X");
				
				connectAttr -f ($bottomRightMultName+".outputX") $selName;
				
			}
			
			
			//check position
			else if (($position == "topLeft") && (!$fifty))
			{
				//create clamp node
				string $topLeftXClampName = `shadingNode -n ($name+"TopLeftXClamp") -asUtility clamp`;
				string $topLeftYClampName = `shadingNode -n ($name+"TopLeftYClamp") -asUtility clamp`;
				
				string $topLeftXAddName =`shadingNode -n ($name+"TopLeftAdd") -asUtility addDoubleLinear`;
				
				string $topLeftMultName = `shadingNode -n ($name+"TopLeftMultDivide") -asUtility multiplyDivide`;
				string $topLeftXMultName = `shadingNode -n ($name+"TopLeftXMultDivide") -asUtility multiplyDivide`;
				
				//set clamp max and min
				setAttr ($topLeftXClampName+".maxR") 1;
				setAttr ($topLeftXClampName+".minR") 0;
				setAttr ($topLeftYClampName+".maxR") 1;
				setAttr ($topLeftYClampName+".minR") 0;
				setAttr ($topLeftXAddName+".input2") 1;
				setAttr ($topLeftXMultName+".input2X") -1;
				
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($topLeftXMultName+".input1X");
				
				connectAttr -f ($topLeftXMultName+".outputX") ($topLeftXAddName+".input1");
				connectAttr -f ($topLeftXAddName+".output") ($topLeftXClampName+".inputR");
				
				connectAttr -f ($name+"CircleCtrl.ty") ($topLeftYClampName+".inputR");
				
				connectAttr -f ($topLeftXClampName+".outputR") ($topLeftMultName+".input1X");
				connectAttr -f ($topLeftYClampName+".outputR") ($topLeftMultName+".input2X");
				
				connectAttr -f ($topLeftMultName+".outputX") $selName;
				
				
			}
			
			//check position
			else if ($position == "bottomLeft")
			{
				//create clamp node
				string $bottomLeftXClampName = `shadingNode -n ($name+"BottomLeftXClamp") -asUtility clamp`;
				string $bottomLeftYClampName = `shadingNode -n ($name+"BottomLeftYClamp") -asUtility clamp`;
				
				string $bottomLeftXAddName =`shadingNode -n ($name+"BottomLeftAdd") -asUtility addDoubleLinear`;
				
				string $bottomLeftMultName = `shadingNode -n ($name+"BottomLeftMultDivide") -asUtility multiplyDivide`;
				string $bottomLeftXMultName = `shadingNode -n ($name+"BottomLeftXMultDivide") -asUtility multiplyDivide`;
				string $bottomLeftYMultName = `shadingNode -n ($name+"BottomLeftYMultDivide") -asUtility multiplyDivide`;
				
				//set clamp max and min
				setAttr ($bottomLeftXClampName+".maxR") 1;
				setAttr ($bottomLeftXClampName+".minR") 0;
				setAttr ($bottomLeftYClampName+".maxR") 1;
				setAttr ($bottomLeftYClampName+".minR") 0;
				setAttr ($bottomLeftXAddName+".input2") 1;
				setAttr ($bottomLeftXMultName+".input2X") -1;
				setAttr ($bottomLeftYMultName+".input2X") -1;
				
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($bottomLeftXMultName+".input1X");
				
				connectAttr -f ($bottomLeftXMultName+".outputX") ($bottomLeftXAddName+".input1");
				connectAttr -f ($bottomLeftXAddName+".output") ($bottomLeftXClampName+".inputR");
				
				connectAttr -f ($name+"CircleCtrl.ty") ($bottomLeftYMultName+".input1X");
				connectAttr -f ($bottomLeftYMultName+".outputX") ($bottomLeftYClampName+".inputR");
				
				connectAttr -f ($bottomLeftXClampName+".outputR") ($bottomLeftMultName+".input1X");
				connectAttr -f ($bottomLeftYClampName+".outputR") ($bottomLeftMultName+".input2X");
				
				connectAttr -f ($bottomLeftMultName+".outputX") $selName;
				
				
			}
			
			//this will connect the controls for the fifty control
			else if (($position == "topRight") && ($fifty))
			{
				//create clamp node
				string $topRightXClampName = `shadingNode -n ($name+"TopRightXClamp") -asUtility clamp`;
				string $topRightYClampName = `shadingNode -n ($name+"TopRightYClamp") -asUtility clamp`;
				
				string $topRightAddName =`shadingNode -n ($name+"TopRightAdd") -asUtility addDoubleLinear`;
				
				string $topRightMultName = `shadingNode -n ($name+"TopRightMultDivide") -asUtility multiplyDivide`;
				string $topRightDivName = `shadingNode -n ($name+"TopRightDivide") -asUtility multiplyDivide`;
				
				//set clamp max and min
				setAttr ($topRightXClampName+".maxR") 1;
				setAttr ($topRightXClampName+".minR") 0;
				setAttr ($topRightYClampName+".maxR") 1;
				setAttr ($topRightYClampName+".minR") 0;
				setAttr ($topRightAddName+".input2") 1;
				setAttr ($topRightDivName+".operation") 2;
				setAttr ($topRightDivName+".input2X") 2;
				
				
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($topRightAddName+".input1");
				connectAttr -f ($topRightAddName+".output") ($topRightDivName+".input1X");
				connectAttr -f ($topRightDivName+".outputX") ($topRightXClampName+".inputR");
				
				connectAttr -f ($name+"CircleCtrl.ty") ($topRightYClampName+".inputR");
				
				connectAttr -f ($topRightXClampName+".outputR") ($topRightMultName+".input1X");
				connectAttr -f ($topRightYClampName+".outputR") ($topRightMultName+".input2X");
				
				connectAttr -f ($topRightMultName+".outputX") $selName;
				
				
			}
			//this will connect the controls for the fifty control
			else if (($position == "topLeft") && ($fifty))
			{
				//create clamp node
				string $topLeftXClampName = `shadingNode -n ($name+"TopLeftXClamp") -asUtility clamp`;
				string $topLeftYClampName = `shadingNode -n ($name+"TopLeftYClamp") -asUtility clamp`;
				
				string $topLeftAddName =`shadingNode -n ($name+"TopLeftAdd") -asUtility addDoubleLinear`;
				
				string $topLeftMultName = `shadingNode -n ($name+"TopLeftMultDivide") -asUtility multiplyDivide`;
				string $topLeftMultXName = `shadingNode -n ($name+"TopLeftXMultDivide") -asUtility multiplyDivide`;
				string $topLeftDivName = `shadingNode -n ($name+"TopLeftDivide") -asUtility multiplyDivide`;
				
				//set clamp max and min
				setAttr ($topLeftXClampName+".maxR") 1;
				setAttr ($topLeftXClampName+".minR") 0;
				setAttr ($topLeftYClampName+".maxR") 1;
				setAttr ($topLeftYClampName+".minR") 0;
				setAttr ($topLeftAddName+".input2") 1;
				setAttr ($topLeftMultXName+".input2X") -1;
				setAttr ($topLeftDivName+".operation") 2;
				setAttr ($topLeftDivName+".input2X") 2;
				setAttr ($topLeftMultXName+".operation") 1;
				
				
				//connect control to clamp and clamp to blend
				connectAttr -f ($name+"CircleCtrl.tx") ($topLeftMultXName+".input1X");
				connectAttr -f ($topLeftMultXName+".outputX") ($topLeftAddName+".input1");
				connectAttr -f ($topLeftAddName+".output") ($topLeftDivName+".input1X");
				connectAttr -f ($topLeftDivName+".outputX") ($topLeftXClampName+".inputR");
				
				connectAttr -f ($name+"CircleCtrl.ty") ($topLeftYClampName+".inputR");
				
				connectAttr -f ($topLeftXClampName+".outputR") ($topLeftMultName+".input1X");
				connectAttr -f ($topLeftYClampName+".outputR") ($topLeftMultName+".input2X");
				
				connectAttr -f ($topLeftMultName+".outputX") $selName;
				
			}
			//print that it was succesful
			print ("connection succesfully made!\n");
		
		}
	}
	
	else if (!`objExists ($name+"Grp")`)
		print ("No control named "+$name+" exists. Please change active control name!\n");
}



//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsToggleTypeF
//	
//		This procedure will toggle between the A & B type and an F type
//
//------------------------------------------------------------------------------------------------------------//

global proc jsToggleTypeF()
{
	
	//check state of F checkbox
	int $state = `checkBox -q -v typeCheckBox_01`;
	
	//if checkbox is on disable certain buttons
	if ($state)
	{
		formLayout -e 
			-af	buttonPicDisabled_a01 	"top"	122
			-af	buttonPicDisabled_a01 	"left"	30
			
			-af	buttonPicDisabled_c01 	"top"	185
			-af	buttonPicDisabled_c01 	"left"	99
			
			mainFormLayout;
			
		button -e -en 0 iconTxtBut_aB;
		button -e -en 0 iconTxtBut_aL;
	}
			
	//if it's not on enable certain buttons	
	else if (!$state)
	{		
		formLayout -e
			-af	buttonPicDisabled_a01 	"top"	76
			-af	buttonPicDisabled_a01 	"left"	30
			
			-af	buttonPicDisabled_c01 	"top"	185
			-af	buttonPicDisabled_c01 	"left"	144
			mainFormLayout;
			
			button -e -en 1 iconTxtBut_aB;
			button -e -en 1 iconTxtBut_aL;
	}
	
}


//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsToggleFifty
//	
//		This procedure will toggle between the D type and a 50/50 D type
//
//------------------------------------------------------------------------------------------------------------//

global proc jsToggleFifty()
{
	
	//check state of fifty checkbox
	int $state = `checkBox -q -v fiftyCheckBox_01`;
	
	//get the name of the active control
	string $name = `textField -q -tx textField_02`;
	
	//if it's on disable certain buttons
	if ($state)
	{
			
		button -e -vis 0 -en 0 iconTxtBut_dR;
		button -e -vis 0 -en 0 iconTxtBut_dL;
		button -e -vis 0 -en 0 iconTxtBut_dTM;
		
	}
			
	//if it's off enable certain buttons		
	else if (!$state)
	{		
		button -e -vis 1 -en 1 iconTxtBut_dR;
		button -e -vis 1 -en 1 iconTxtBut_dL;
		button -e -vis 1 -en 1 iconTxtBut_dTM;
	}
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsSelectBlend
//	
//		This procedure will select the blend if it exists
//
//------------------------------------------------------------------------------------------------------------//

global proc jsSelectBlend()
{
	//get the name of the selected item
	string $selectedName[] = `textScrollList -q -si txtScrollList_01`;
	//buffer for tokenize
	string $buffer[];
	int $i;
	//loop through all selected item
	for ($i = 0; $i < size($selectedName); $i++)
	{
		//if it's the first item selected
		if ($i == 0)
		{
			//tokenize the name
			tokenize $selectedName[$i] "." $buffer;
			//if the blend exists clear selection and select it
			if (`objExists $buffer[1]`)
				select -r $buffer[1];
			
		}
		//if it's not the first object
		else if ($i >= 1)
		{
			//tokenize the name
			tokenize $selectedName[$i] "." $buffer;
			//if the object exists add it to the selection
			if (`objExists $buffer[1]`)
				select -add $buffer[1];
		}
	}
	
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsUpdate
//	
//		This procedure will update the active control text according to whatever object is selected
//
//------------------------------------------------------------------------------------------------------------//

global proc jsUpdate()
{
	//get the name of the selected object
	string $sel[] = `ls -sl`;
	
	//check to see if anything is selected
	if (size($sel) == 0)
		print "Nothing is selected to update. Please select a control!\n";
	else
	{
		//get a list of attributes
		string $attrs[] = `listAttr`;
		string $attr;
		
		//loop through all the attributes to check if it's a valid control
		for ($attr in $attrs)
		{
			if ($attr == "name")
			{
				//get the attribute string that holds the name
				$name = `getAttr ($sel[0]+".name")`;
			
		
				//set the textField
				textField -e -tx $name textField_02;
				
				jsCheckControlType;
			}
		}
	}
	
}
	
	
//------------------------------------------------------------------------------------------------------------//
//	PROC:	jsCheckControlType
//	
//		This procedure will disable controls that are not activated
//
//------------------------------------------------------------------------------------------------------------//

global proc jsCheckControlType()
{
	//get the name of the active control
	string $name = `textField -q -tx textField_02`;
	
	//if the object doesnt exist print this error
	if (!`objExists ($name+"Grp")`)
		print "Control does not exist!\n";
	
	//if the object does exist disable certain buttons
	else if (`objExists ($name+"Grp")`)
	{
		//get the attribute type for the active control
		string $type = `getAttr ($name+"Grp.type")`;
		if ($type == "A")
		{
			
			button -e -en 1 -vis 1 iconTxtBut_aT;
			button -e -en 1 -vis 1 iconTxtBut_aB;
			text -e -en 1 txtType_a01;
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aL;
			button -e -en 0 -vis 0 iconTxtBut_aR;
			text -e -en 0 txtType_c01;
			
			button -e -en 0 -vis 0 iconTxtBut_dTL;
			button -e -en 0 -vis 0 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			
			text -e -en 0 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
		else if ($type == "B")
		{
			
			button -e -en 1 -vis 1 iconTxtBut_aL;
			button -e -en 1 -vis 1 iconTxtBut_aR;
			text -e -en 1 txtType_c01;
			
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aT;
			button -e -en 0 -vis 0 iconTxtBut_aB;
			text -e -en 0 txtType_a01;
			
			button -e -en 0 -vis 0 iconTxtBut_dTL;
			button -e -en 0 -vis 0 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			text -e -en 0 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
		else if ($type == "C")
		{
			
			button -e -en 0 -vis 0 iconTxtBut_aL;
			button -e -en 0 -vis 0 iconTxtBut_aR;
			text -e -en 0 txtType_c01;
			
			
			button -e -en 1 -vis 1 iconTxtBut_bTL;
			button -e -en 1 -vis 1 iconTxtBut_bBL;
			button -e -en 1 -vis 1 iconTxtBut_bTR;
			button -e -en 1 -vis 1 iconTxtBut_bBR;
			
			button -e -en 1 -vis 1 iconTxtBut_bTM;
			button -e -en 1 -vis 1 iconTxtBut_bLM;
			button -e -en 1 -vis 1 iconTxtBut_bRM;
			button -e -en 1 -vis 1 iconTxtBut_bBM;
			text -e -en 1 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aT;
			button -e -en 0 -vis 0 iconTxtBut_aB;
			text -e -en 0 txtType_a01;
			
			button -e -en 0 -vis 0 iconTxtBut_dTL;
			button -e -en 0 -vis 0 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			text -e -en 0 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
		else if ($type == "D")
		{
			
			button -e -en 0 -vis 0 iconTxtBut_aL;
			button -e -en 0 -vis 0 iconTxtBut_aR;
			text -e -en 0 txtType_c01;
			
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aT;
			button -e -en 0 -vis 0 iconTxtBut_aB;
			text -e -en 0 txtType_a01;
			
			button -e -en 1 -vis 1 iconTxtBut_dTL;
			button -e -en 1 -vis 1 iconTxtBut_dTR;
			button -e -en 1 -vis 1 iconTxtBut_dTM;
			button -e -en 1 -vis 1 iconTxtBut_dR;
			button -e -en 1 -vis 1 iconTxtBut_dL;
			text -e -en 1 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
		else if ($type == "E")
		{
			
			button -e -en 0 -vis 0 iconTxtBut_aL;
			button -e -en 0 -vis 0 iconTxtBut_aR;
			text -e -en 0 txtType_c01;
			
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aT;
			button -e -en 0 -vis 0 iconTxtBut_aB;
			text -e -en 0 txtType_a01;
			
			button -e -en 0 -vis 0 iconTxtBut_dTL;
			button -e -en 0 -vis 0 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			text -e -en 0 txtType_d01;
			
			button -e -en 1 -vis 1 iconTxtBut_eTR;
			button -e -en 1 -vis 1 iconTxtBut_eT;
			button -e -en 1 -vis 1 iconTxtBut_eR;
			text -e -en 1 txtType_e01;
		}
		
		else if ($type == "Fa")
		{
			
			button -e -en 1 -vis 1 iconTxtBut_aT;
			button -e -en 1 -vis 1 iconTxtBut_aB;
			text -e -en 1 txtType_a01;
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aL;
			button -e -en 0 -vis 0 iconTxtBut_aR;
			text -e -en 0 txtType_c01;
			
			button -e -en 0 -vis 0 iconTxtBut_dTL;
			button -e -en 0 -vis 0 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			text -e -en 0 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
		else if ($type == "Fb")
		{
			
			button -e -en 1 -vis 1 iconTxtBut_aL;
			button -e -en 1 -vis 1 iconTxtBut_aR;
			text -e -en 1 txtType_c01;
			
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aT;
			button -e -en 0 -vis 0 iconTxtBut_aB;
			text -e -en 0 txtType_a01;
			
			button -e -en 0 -vis 0 iconTxtBut_dTL;
			button -e -en 0 -vis 0 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			text -e -en 0 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
		else if ($type == "50")
		{
			
			button -e -en 0 -vis 0 iconTxtBut_aL;
			button -e -en 0 -vis 0 iconTxtBut_aR;
			text -e -en 0 txtType_c01;
			
			
			button -e -en 0 -vis 0 iconTxtBut_bTL;
			button -e -en 0 -vis 0 iconTxtBut_bBL;
			button -e -en 0 -vis 0 iconTxtBut_bTR;
			button -e -en 0 -vis 0 iconTxtBut_bBR;
			
			button -e -en 0 -vis 0 iconTxtBut_bTM;
			button -e -en 0 -vis 0 iconTxtBut_bLM;
			button -e -en 0 -vis 0 iconTxtBut_bRM;
			button -e -en 0 -vis 0 iconTxtBut_bBM;
			text -e -en 0 txtType_b01;
			
			button -e -en 0 -vis 0 iconTxtBut_aT;
			button -e -en 0 -vis 0 iconTxtBut_aB;
			text -e -en 0 txtType_a01;
			
			button -e -en 1 -vis 1 iconTxtBut_dTL;
			button -e -en 1 -vis 1 iconTxtBut_dTR;
			button -e -en 0 -vis 0 iconTxtBut_dTM;
			button -e -en 0 -vis 0 iconTxtBut_dR;
			button -e -en 0 -vis 0 iconTxtBut_dL;
			text -e -en 1 txtType_d01;
			
			button -e -en 0 -vis 0 iconTxtBut_eTR;
			button -e -en 0 -vis 0 iconTxtBut_eT;
			button -e -en 0 -vis 0 iconTxtBut_eR;
			text -e -en 0 txtType_e01;
		}
		
	}
	
	
}
			
